Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLANCO
    CADENA2
    COMENTARIO_MULTILINEA
    COMENTARIO_SIMPLE
    COMILLAS
    LLAVEDER
    LLAVEIZQ

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> def main PARIZQ PARDER DOS_PUNTOS
Rule 5     instruccion -> def ID PARIZQ PARDER DOS_PUNTOS
Rule 6     instruccion -> importacion
Rule 7     instruccion -> ldeclaracionesg
Rule 8     instruccion -> decorador
Rule 9     instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS
Rule 10    instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS
Rule 11    decorador -> ARROBA with_goto
Rule 12    sentGoto -> goto PUNTO ID
Rule 13    sentLabel -> label PUNTO ID
Rule 14    importacion -> from goto import with_goto importas
Rule 15    importacion -> from lidsp import POR importas
Rule 16    importacion -> from lidsp import ID importas
Rule 17    importas -> as ID
Rule 18    importas -> <empty>
Rule 19    importacion -> import lidsp importas
Rule 20    lidsp -> lidsp PUNTO ID
Rule 21    lidsp -> ID
Rule 22    lidsp -> main
Rule 23    lidsp -> ejecutar
Rule 24    ldeclarlocals -> ldeclarlocals ldeclaracionesg
Rule 25    ldeclarlocals -> ldeclaracionesg
Rule 26    ldeclaracionesg -> global ID
Rule 27    ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER
Rule 28    ldeclaracionesg -> lidsp PARIZQ PARDER
Rule 29    ldeclaracionesg -> ID PARIZQ PARDER
Rule 30    ldeclaracionesg -> main PARIZQ PARDER
Rule 31    ldeclaracionesg -> print PARIZQ expresiones PARDER
Rule 32    ldeclaracionesg -> print PARIZQ ID CADENA PARDER
Rule 33    ldeclaracionesg -> ID PUNTO ID IGUAL expre
Rule 34    ldeclaracionesg -> lidsp IGUAL expresiones
Rule 35    ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones
Rule 36    ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER
Rule 37    ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER
Rule 38    ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER
Rule 39    ldeclaracionesg -> for ID in lidsp DOS_PUNTOS
Rule 40    ldeclaracionesg -> return
Rule 41    ldeclaracionesg -> sentGoto
Rule 42    ldeclaracionesg -> sentLabel
Rule 43    expresiones -> expresiones IGUAL expresiones
Rule 44    expresiones -> expresiones MAYORQ expresiones
Rule 45    expresiones -> expresiones MENORQ expresiones
Rule 46    expresiones -> expresiones MAYOR_IGUALQ expresiones
Rule 47    expresiones -> expresiones MENOR_IGUALQ expresiones
Rule 48    expresiones -> expresiones DISTINTO expresiones
Rule 49    expresiones -> expresiones MAS expresiones
Rule 50    expresiones -> expresiones MENOS expresiones
Rule 51    expresiones -> expresiones POR expresiones
Rule 52    expresiones -> expresiones DIVIDIDO expresiones
Rule 53    expresiones -> expresiones EXPONENCIACION expresiones
Rule 54    expresiones -> expresiones MODULO expresiones
Rule 55    relacional -> IGUAL IGUAL
Rule 56    relacional -> MAYORQ
Rule 57    relacional -> MENORQ
Rule 58    relacional -> MAYOR_IGUALQ
Rule 59    relacional -> MENOR_IGUALQ
Rule 60    relacional -> DISTINTO
Rule 61    expresiones -> expre
Rule 62    expre -> ID
Rule 63    expre -> ENTERO
Rule 64    expre -> FDECIMAL
Rule 65    expre -> CARACTER
Rule 66    expre -> None
Rule 67    expre -> true
Rule 68    expre -> false
Rule 69    expre -> CADENA
Rule 70    expre -> ID CADENA
Rule 71    expre -> CORIZQ CORDER
Rule 72    expre -> CORIZQ expresiones CORDER
Rule 73    expre -> ID CORIZQ expresiones CORDER
Rule 74    expre -> ID PARIZQ expresiones PARDER
Rule 75    expre -> ejecutar_analisis PARIZQ ID PARDER
Rule 76    expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

Terminals, with rules where they appear

ARROBA               : 11
BLANCO               : 
CADENA               : 10 32 69 70
CADENA2              : 
CARACTER             : 65
COMA                 : 27 37 76
COMENTARIO_MULTILINEA : 
COMENTARIO_SIMPLE    : 
COMILLAS             : 
CORDER               : 35 38 71 72 73
CORIZQ               : 35 38 71 72 73
DISTINTO             : 48 60
DIVIDIDO             : 52
DOS_PUNTOS           : 4 5 9 10 39
ENTERO               : 63
EXPONENCIACION       : 53
FDECIMAL             : 64
ID                   : 5 12 13 16 17 20 21 26 27 27 29 32 33 33 35 36 36 36 37 37 37 38 38 39 62 70 73 74 75 76 76 76
IGUAL                : 10 10 33 34 35 38 43 55 55
LLAVEDER             : 
LLAVEIZQ             : 
MAS                  : 49
MAYORQ               : 44 56
MAYOR_IGUALQ         : 46 58
MENORQ               : 45 57
MENOR_IGUALQ         : 47 59
MENOS                : 50
MODULO               : 54
NAME                 : 10
None                 : 66
PARDER               : 4 5 9 27 28 29 30 31 32 36 37 74 75 76
PARIZQ               : 4 5 9 27 28 29 30 31 32 36 37 74 75 76
POR                  : 15 51
PUNTO                : 12 13 20 33 36 37 38 76
as                   : 17
def                  : 4 5
ejecutar             : 23 37 76
ejecutar_analisis    : 75
error                : 
false                : 68
for                  : 39
from                 : 14 15 16
global               : 26
goto                 : 12 14
if                   : 9 10
import               : 14 15 16 19
in                   : 39
label                : 13
main                 : 4 22 30
print                : 31 32
return               : 40
true                 : 67
with_goto            : 11 14

Nonterminals, with rules where they appear

decorador            : 8
expre                : 9 9 33 61
expresiones          : 31 34 35 35 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 72 73 74
importacion          : 6
importas             : 14 15 16 19
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2
ldeclaracionesg      : 7 24 25
ldeclarlocals        : 24
lidsp                : 15 16 19 20 27 28 34 39
relacional           : 9
sentGoto             : 41
sentLabel            : 42

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . def main PARIZQ PARDER DOS_PUNTOS
    (5) instruccion -> . def ID PARIZQ PARDER DOS_PUNTOS
    (6) instruccion -> . importacion
    (7) instruccion -> . ldeclaracionesg
    (8) instruccion -> . decorador
    (9) instruccion -> . if PARIZQ expre relacional expre PARDER DOS_PUNTOS
    (10) instruccion -> . if NAME IGUAL IGUAL CADENA DOS_PUNTOS
    (14) importacion -> . from goto import with_goto importas
    (15) importacion -> . from lidsp import POR importas
    (16) importacion -> . from lidsp import ID importas
    (19) importacion -> . import lidsp importas
    (26) ldeclaracionesg -> . global ID
    (27) ldeclaracionesg -> . lidsp PARIZQ ID COMA ID PARDER
    (28) ldeclaracionesg -> . lidsp PARIZQ PARDER
    (29) ldeclaracionesg -> . ID PARIZQ PARDER
    (30) ldeclaracionesg -> . main PARIZQ PARDER
    (31) ldeclaracionesg -> . print PARIZQ expresiones PARDER
    (32) ldeclaracionesg -> . print PARIZQ ID CADENA PARDER
    (33) ldeclaracionesg -> . ID PUNTO ID IGUAL expre
    (34) ldeclaracionesg -> . lidsp IGUAL expresiones
    (35) ldeclaracionesg -> . ID CORIZQ expresiones CORDER IGUAL expresiones
    (36) ldeclaracionesg -> . ID PUNTO ID PARIZQ ID PARDER
    (37) ldeclaracionesg -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER
    (38) ldeclaracionesg -> . ID PUNTO ID IGUAL CORIZQ CORDER
    (39) ldeclaracionesg -> . for ID in lidsp DOS_PUNTOS
    (40) ldeclaracionesg -> . return
    (41) ldeclaracionesg -> . sentGoto
    (42) ldeclaracionesg -> . sentLabel
    (11) decorador -> . ARROBA with_goto
    (20) lidsp -> . lidsp PUNTO ID
    (21) lidsp -> . ID
    (22) lidsp -> . main
    (23) lidsp -> . ejecutar
    (12) sentGoto -> . goto PUNTO ID
    (13) sentLabel -> . label PUNTO ID

    def             shift and go to state 4
    if              shift and go to state 10
    from            shift and go to state 11
    import          shift and go to state 13
    global          shift and go to state 15
    ID              shift and go to state 6
    main            shift and go to state 5
    print           shift and go to state 16
    for             shift and go to state 18
    return          shift and go to state 19
    ARROBA          shift and go to state 22
    ejecutar        shift and go to state 17
    goto            shift and go to state 12
    label           shift and go to state 23

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    importacion                    shift and go to state 7
    ldeclaracionesg                shift and go to state 8
    decorador                      shift and go to state 9
    lidsp                          shift and go to state 14
    sentGoto                       shift and go to state 20
    sentLabel                      shift and go to state 21

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . def main PARIZQ PARDER DOS_PUNTOS
    (5) instruccion -> . def ID PARIZQ PARDER DOS_PUNTOS
    (6) instruccion -> . importacion
    (7) instruccion -> . ldeclaracionesg
    (8) instruccion -> . decorador
    (9) instruccion -> . if PARIZQ expre relacional expre PARDER DOS_PUNTOS
    (10) instruccion -> . if NAME IGUAL IGUAL CADENA DOS_PUNTOS
    (14) importacion -> . from goto import with_goto importas
    (15) importacion -> . from lidsp import POR importas
    (16) importacion -> . from lidsp import ID importas
    (19) importacion -> . import lidsp importas
    (26) ldeclaracionesg -> . global ID
    (27) ldeclaracionesg -> . lidsp PARIZQ ID COMA ID PARDER
    (28) ldeclaracionesg -> . lidsp PARIZQ PARDER
    (29) ldeclaracionesg -> . ID PARIZQ PARDER
    (30) ldeclaracionesg -> . main PARIZQ PARDER
    (31) ldeclaracionesg -> . print PARIZQ expresiones PARDER
    (32) ldeclaracionesg -> . print PARIZQ ID CADENA PARDER
    (33) ldeclaracionesg -> . ID PUNTO ID IGUAL expre
    (34) ldeclaracionesg -> . lidsp IGUAL expresiones
    (35) ldeclaracionesg -> . ID CORIZQ expresiones CORDER IGUAL expresiones
    (36) ldeclaracionesg -> . ID PUNTO ID PARIZQ ID PARDER
    (37) ldeclaracionesg -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER
    (38) ldeclaracionesg -> . ID PUNTO ID IGUAL CORIZQ CORDER
    (39) ldeclaracionesg -> . for ID in lidsp DOS_PUNTOS
    (40) ldeclaracionesg -> . return
    (41) ldeclaracionesg -> . sentGoto
    (42) ldeclaracionesg -> . sentLabel
    (11) decorador -> . ARROBA with_goto
    (20) lidsp -> . lidsp PUNTO ID
    (21) lidsp -> . ID
    (22) lidsp -> . main
    (23) lidsp -> . ejecutar
    (12) sentGoto -> . goto PUNTO ID
    (13) sentLabel -> . label PUNTO ID

    $end            reduce using rule 1 (init -> instrucciones .)
    def             shift and go to state 4
    if              shift and go to state 10
    from            shift and go to state 11
    import          shift and go to state 13
    global          shift and go to state 15
    ID              shift and go to state 6
    main            shift and go to state 5
    print           shift and go to state 16
    for             shift and go to state 18
    return          shift and go to state 19
    ARROBA          shift and go to state 22
    ejecutar        shift and go to state 17
    goto            shift and go to state 12
    label           shift and go to state 23

    instruccion                    shift and go to state 24
    importacion                    shift and go to state 7
    ldeclaracionesg                shift and go to state 8
    decorador                      shift and go to state 9
    lidsp                          shift and go to state 14
    sentGoto                       shift and go to state 20
    sentLabel                      shift and go to state 21

state 3

    (3) instrucciones -> instruccion .

    def             reduce using rule 3 (instrucciones -> instruccion .)
    if              reduce using rule 3 (instrucciones -> instruccion .)
    from            reduce using rule 3 (instrucciones -> instruccion .)
    import          reduce using rule 3 (instrucciones -> instruccion .)
    global          reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    main            reduce using rule 3 (instrucciones -> instruccion .)
    print           reduce using rule 3 (instrucciones -> instruccion .)
    for             reduce using rule 3 (instrucciones -> instruccion .)
    return          reduce using rule 3 (instrucciones -> instruccion .)
    ARROBA          reduce using rule 3 (instrucciones -> instruccion .)
    ejecutar        reduce using rule 3 (instrucciones -> instruccion .)
    goto            reduce using rule 3 (instrucciones -> instruccion .)
    label           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> def . main PARIZQ PARDER DOS_PUNTOS
    (5) instruccion -> def . ID PARIZQ PARDER DOS_PUNTOS

    main            shift and go to state 25
    ID              shift and go to state 26


state 5

    (30) ldeclaracionesg -> main . PARIZQ PARDER
    (22) lidsp -> main .

  ! shift/reduce conflict for PARIZQ resolved as shift
    PARIZQ          shift and go to state 27
    IGUAL           reduce using rule 22 (lidsp -> main .)
    PUNTO           reduce using rule 22 (lidsp -> main .)

  ! PARIZQ          [ reduce using rule 22 (lidsp -> main .) ]


state 6

    (29) ldeclaracionesg -> ID . PARIZQ PARDER
    (33) ldeclaracionesg -> ID . PUNTO ID IGUAL expre
    (35) ldeclaracionesg -> ID . CORIZQ expresiones CORDER IGUAL expresiones
    (36) ldeclaracionesg -> ID . PUNTO ID PARIZQ ID PARDER
    (37) ldeclaracionesg -> ID . PUNTO ejecutar PARIZQ ID COMA ID PARDER
    (38) ldeclaracionesg -> ID . PUNTO ID IGUAL CORIZQ CORDER
    (21) lidsp -> ID .

  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
    PARIZQ          shift and go to state 28
    PUNTO           shift and go to state 29
    CORIZQ          shift and go to state 30
    IGUAL           reduce using rule 21 (lidsp -> ID .)

  ! PARIZQ          [ reduce using rule 21 (lidsp -> ID .) ]
  ! PUNTO           [ reduce using rule 21 (lidsp -> ID .) ]


state 7

    (6) instruccion -> importacion .

    def             reduce using rule 6 (instruccion -> importacion .)
    if              reduce using rule 6 (instruccion -> importacion .)
    from            reduce using rule 6 (instruccion -> importacion .)
    import          reduce using rule 6 (instruccion -> importacion .)
    global          reduce using rule 6 (instruccion -> importacion .)
    ID              reduce using rule 6 (instruccion -> importacion .)
    main            reduce using rule 6 (instruccion -> importacion .)
    print           reduce using rule 6 (instruccion -> importacion .)
    for             reduce using rule 6 (instruccion -> importacion .)
    return          reduce using rule 6 (instruccion -> importacion .)
    ARROBA          reduce using rule 6 (instruccion -> importacion .)
    ejecutar        reduce using rule 6 (instruccion -> importacion .)
    goto            reduce using rule 6 (instruccion -> importacion .)
    label           reduce using rule 6 (instruccion -> importacion .)
    $end            reduce using rule 6 (instruccion -> importacion .)


state 8

    (7) instruccion -> ldeclaracionesg .

    def             reduce using rule 7 (instruccion -> ldeclaracionesg .)
    if              reduce using rule 7 (instruccion -> ldeclaracionesg .)
    from            reduce using rule 7 (instruccion -> ldeclaracionesg .)
    import          reduce using rule 7 (instruccion -> ldeclaracionesg .)
    global          reduce using rule 7 (instruccion -> ldeclaracionesg .)
    ID              reduce using rule 7 (instruccion -> ldeclaracionesg .)
    main            reduce using rule 7 (instruccion -> ldeclaracionesg .)
    print           reduce using rule 7 (instruccion -> ldeclaracionesg .)
    for             reduce using rule 7 (instruccion -> ldeclaracionesg .)
    return          reduce using rule 7 (instruccion -> ldeclaracionesg .)
    ARROBA          reduce using rule 7 (instruccion -> ldeclaracionesg .)
    ejecutar        reduce using rule 7 (instruccion -> ldeclaracionesg .)
    goto            reduce using rule 7 (instruccion -> ldeclaracionesg .)
    label           reduce using rule 7 (instruccion -> ldeclaracionesg .)
    $end            reduce using rule 7 (instruccion -> ldeclaracionesg .)


state 9

    (8) instruccion -> decorador .

    def             reduce using rule 8 (instruccion -> decorador .)
    if              reduce using rule 8 (instruccion -> decorador .)
    from            reduce using rule 8 (instruccion -> decorador .)
    import          reduce using rule 8 (instruccion -> decorador .)
    global          reduce using rule 8 (instruccion -> decorador .)
    ID              reduce using rule 8 (instruccion -> decorador .)
    main            reduce using rule 8 (instruccion -> decorador .)
    print           reduce using rule 8 (instruccion -> decorador .)
    for             reduce using rule 8 (instruccion -> decorador .)
    return          reduce using rule 8 (instruccion -> decorador .)
    ARROBA          reduce using rule 8 (instruccion -> decorador .)
    ejecutar        reduce using rule 8 (instruccion -> decorador .)
    goto            reduce using rule 8 (instruccion -> decorador .)
    label           reduce using rule 8 (instruccion -> decorador .)
    $end            reduce using rule 8 (instruccion -> decorador .)


state 10

    (9) instruccion -> if . PARIZQ expre relacional expre PARDER DOS_PUNTOS
    (10) instruccion -> if . NAME IGUAL IGUAL CADENA DOS_PUNTOS

    PARIZQ          shift and go to state 31
    NAME            shift and go to state 32


state 11

    (14) importacion -> from . goto import with_goto importas
    (15) importacion -> from . lidsp import POR importas
    (16) importacion -> from . lidsp import ID importas
    (20) lidsp -> . lidsp PUNTO ID
    (21) lidsp -> . ID
    (22) lidsp -> . main
    (23) lidsp -> . ejecutar

    goto            shift and go to state 33
    ID              shift and go to state 35
    main            shift and go to state 36
    ejecutar        shift and go to state 17

    lidsp                          shift and go to state 34

state 12

    (12) sentGoto -> goto . PUNTO ID

    PUNTO           shift and go to state 37


state 13

    (19) importacion -> import . lidsp importas
    (20) lidsp -> . lidsp PUNTO ID
    (21) lidsp -> . ID
    (22) lidsp -> . main
    (23) lidsp -> . ejecutar

    ID              shift and go to state 35
    main            shift and go to state 36
    ejecutar        shift and go to state 17

    lidsp                          shift and go to state 38

state 14

    (27) ldeclaracionesg -> lidsp . PARIZQ ID COMA ID PARDER
    (28) ldeclaracionesg -> lidsp . PARIZQ PARDER
    (34) ldeclaracionesg -> lidsp . IGUAL expresiones
    (20) lidsp -> lidsp . PUNTO ID

    PARIZQ          shift and go to state 39
    IGUAL           shift and go to state 40
    PUNTO           shift and go to state 41


state 15

    (26) ldeclaracionesg -> global . ID

    ID              shift and go to state 42


state 16

    (31) ldeclaracionesg -> print . PARIZQ expresiones PARDER
    (32) ldeclaracionesg -> print . PARIZQ ID CADENA PARDER

    PARIZQ          shift and go to state 43


state 17

    (23) lidsp -> ejecutar .

    PARIZQ          reduce using rule 23 (lidsp -> ejecutar .)
    IGUAL           reduce using rule 23 (lidsp -> ejecutar .)
    PUNTO           reduce using rule 23 (lidsp -> ejecutar .)
    import          reduce using rule 23 (lidsp -> ejecutar .)
    as              reduce using rule 23 (lidsp -> ejecutar .)
    def             reduce using rule 23 (lidsp -> ejecutar .)
    if              reduce using rule 23 (lidsp -> ejecutar .)
    from            reduce using rule 23 (lidsp -> ejecutar .)
    global          reduce using rule 23 (lidsp -> ejecutar .)
    ID              reduce using rule 23 (lidsp -> ejecutar .)
    main            reduce using rule 23 (lidsp -> ejecutar .)
    print           reduce using rule 23 (lidsp -> ejecutar .)
    for             reduce using rule 23 (lidsp -> ejecutar .)
    return          reduce using rule 23 (lidsp -> ejecutar .)
    ARROBA          reduce using rule 23 (lidsp -> ejecutar .)
    ejecutar        reduce using rule 23 (lidsp -> ejecutar .)
    goto            reduce using rule 23 (lidsp -> ejecutar .)
    label           reduce using rule 23 (lidsp -> ejecutar .)
    $end            reduce using rule 23 (lidsp -> ejecutar .)
    DOS_PUNTOS      reduce using rule 23 (lidsp -> ejecutar .)


state 18

    (39) ldeclaracionesg -> for . ID in lidsp DOS_PUNTOS

    ID              shift and go to state 44


state 19

    (40) ldeclaracionesg -> return .

    def             reduce using rule 40 (ldeclaracionesg -> return .)
    if              reduce using rule 40 (ldeclaracionesg -> return .)
    from            reduce using rule 40 (ldeclaracionesg -> return .)
    import          reduce using rule 40 (ldeclaracionesg -> return .)
    global          reduce using rule 40 (ldeclaracionesg -> return .)
    ID              reduce using rule 40 (ldeclaracionesg -> return .)
    main            reduce using rule 40 (ldeclaracionesg -> return .)
    print           reduce using rule 40 (ldeclaracionesg -> return .)
    for             reduce using rule 40 (ldeclaracionesg -> return .)
    return          reduce using rule 40 (ldeclaracionesg -> return .)
    ARROBA          reduce using rule 40 (ldeclaracionesg -> return .)
    ejecutar        reduce using rule 40 (ldeclaracionesg -> return .)
    goto            reduce using rule 40 (ldeclaracionesg -> return .)
    label           reduce using rule 40 (ldeclaracionesg -> return .)
    $end            reduce using rule 40 (ldeclaracionesg -> return .)


state 20

    (41) ldeclaracionesg -> sentGoto .

    def             reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    if              reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    from            reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    import          reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    global          reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    ID              reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    main            reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    print           reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    for             reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    return          reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    ARROBA          reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    ejecutar        reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    goto            reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    label           reduce using rule 41 (ldeclaracionesg -> sentGoto .)
    $end            reduce using rule 41 (ldeclaracionesg -> sentGoto .)


state 21

    (42) ldeclaracionesg -> sentLabel .

    def             reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    if              reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    from            reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    import          reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    global          reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    ID              reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    main            reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    print           reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    for             reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    return          reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    ARROBA          reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    ejecutar        reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    goto            reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    label           reduce using rule 42 (ldeclaracionesg -> sentLabel .)
    $end            reduce using rule 42 (ldeclaracionesg -> sentLabel .)


state 22

    (11) decorador -> ARROBA . with_goto

    with_goto       shift and go to state 45


state 23

    (13) sentLabel -> label . PUNTO ID

    PUNTO           shift and go to state 46


state 24

    (2) instrucciones -> instrucciones instruccion .

    def             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    if              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    from            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    import          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    global          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    main            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    print           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    for             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    return          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ARROBA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ejecutar        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    goto            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    label           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 25

    (4) instruccion -> def main . PARIZQ PARDER DOS_PUNTOS

    PARIZQ          shift and go to state 47


state 26

    (5) instruccion -> def ID . PARIZQ PARDER DOS_PUNTOS

    PARIZQ          shift and go to state 48


state 27

    (30) ldeclaracionesg -> main PARIZQ . PARDER

    PARDER          shift and go to state 49


state 28

    (29) ldeclaracionesg -> ID PARIZQ . PARDER

    PARDER          shift and go to state 50


state 29

    (33) ldeclaracionesg -> ID PUNTO . ID IGUAL expre
    (36) ldeclaracionesg -> ID PUNTO . ID PARIZQ ID PARDER
    (37) ldeclaracionesg -> ID PUNTO . ejecutar PARIZQ ID COMA ID PARDER
    (38) ldeclaracionesg -> ID PUNTO . ID IGUAL CORIZQ CORDER

    ID              shift and go to state 51
    ejecutar        shift and go to state 52


state 30

    (35) ldeclaracionesg -> ID CORIZQ . expresiones CORDER IGUAL expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 55
    expre                          shift and go to state 56

state 31

    (9) instruccion -> if PARIZQ . expre relacional expre PARDER DOS_PUNTOS
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expre                          shift and go to state 65

state 32

    (10) instruccion -> if NAME . IGUAL IGUAL CADENA DOS_PUNTOS

    IGUAL           shift and go to state 66


state 33

    (14) importacion -> from goto . import with_goto importas

    import          shift and go to state 67


state 34

    (15) importacion -> from lidsp . import POR importas
    (16) importacion -> from lidsp . import ID importas
    (20) lidsp -> lidsp . PUNTO ID

    import          shift and go to state 68
    PUNTO           shift and go to state 41


state 35

    (21) lidsp -> ID .

    import          reduce using rule 21 (lidsp -> ID .)
    PUNTO           reduce using rule 21 (lidsp -> ID .)
    as              reduce using rule 21 (lidsp -> ID .)
    def             reduce using rule 21 (lidsp -> ID .)
    if              reduce using rule 21 (lidsp -> ID .)
    from            reduce using rule 21 (lidsp -> ID .)
    global          reduce using rule 21 (lidsp -> ID .)
    ID              reduce using rule 21 (lidsp -> ID .)
    main            reduce using rule 21 (lidsp -> ID .)
    print           reduce using rule 21 (lidsp -> ID .)
    for             reduce using rule 21 (lidsp -> ID .)
    return          reduce using rule 21 (lidsp -> ID .)
    ARROBA          reduce using rule 21 (lidsp -> ID .)
    ejecutar        reduce using rule 21 (lidsp -> ID .)
    goto            reduce using rule 21 (lidsp -> ID .)
    label           reduce using rule 21 (lidsp -> ID .)
    $end            reduce using rule 21 (lidsp -> ID .)
    DOS_PUNTOS      reduce using rule 21 (lidsp -> ID .)


state 36

    (22) lidsp -> main .

    import          reduce using rule 22 (lidsp -> main .)
    PUNTO           reduce using rule 22 (lidsp -> main .)
    as              reduce using rule 22 (lidsp -> main .)
    def             reduce using rule 22 (lidsp -> main .)
    if              reduce using rule 22 (lidsp -> main .)
    from            reduce using rule 22 (lidsp -> main .)
    global          reduce using rule 22 (lidsp -> main .)
    ID              reduce using rule 22 (lidsp -> main .)
    main            reduce using rule 22 (lidsp -> main .)
    print           reduce using rule 22 (lidsp -> main .)
    for             reduce using rule 22 (lidsp -> main .)
    return          reduce using rule 22 (lidsp -> main .)
    ARROBA          reduce using rule 22 (lidsp -> main .)
    ejecutar        reduce using rule 22 (lidsp -> main .)
    goto            reduce using rule 22 (lidsp -> main .)
    label           reduce using rule 22 (lidsp -> main .)
    $end            reduce using rule 22 (lidsp -> main .)
    DOS_PUNTOS      reduce using rule 22 (lidsp -> main .)


state 37

    (12) sentGoto -> goto PUNTO . ID

    ID              shift and go to state 69


state 38

    (19) importacion -> import lidsp . importas
    (20) lidsp -> lidsp . PUNTO ID
    (17) importas -> . as ID
    (18) importas -> .

    PUNTO           shift and go to state 41
    as              shift and go to state 71
    def             reduce using rule 18 (importas -> .)
    if              reduce using rule 18 (importas -> .)
    from            reduce using rule 18 (importas -> .)
    import          reduce using rule 18 (importas -> .)
    global          reduce using rule 18 (importas -> .)
    ID              reduce using rule 18 (importas -> .)
    main            reduce using rule 18 (importas -> .)
    print           reduce using rule 18 (importas -> .)
    for             reduce using rule 18 (importas -> .)
    return          reduce using rule 18 (importas -> .)
    ARROBA          reduce using rule 18 (importas -> .)
    ejecutar        reduce using rule 18 (importas -> .)
    goto            reduce using rule 18 (importas -> .)
    label           reduce using rule 18 (importas -> .)
    $end            reduce using rule 18 (importas -> .)

    importas                       shift and go to state 70

state 39

    (27) ldeclaracionesg -> lidsp PARIZQ . ID COMA ID PARDER
    (28) ldeclaracionesg -> lidsp PARIZQ . PARDER

    ID              shift and go to state 72
    PARDER          shift and go to state 73


state 40

    (34) ldeclaracionesg -> lidsp IGUAL . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 74
    expre                          shift and go to state 56

state 41

    (20) lidsp -> lidsp PUNTO . ID

    ID              shift and go to state 75


state 42

    (26) ldeclaracionesg -> global ID .

    def             reduce using rule 26 (ldeclaracionesg -> global ID .)
    if              reduce using rule 26 (ldeclaracionesg -> global ID .)
    from            reduce using rule 26 (ldeclaracionesg -> global ID .)
    import          reduce using rule 26 (ldeclaracionesg -> global ID .)
    global          reduce using rule 26 (ldeclaracionesg -> global ID .)
    ID              reduce using rule 26 (ldeclaracionesg -> global ID .)
    main            reduce using rule 26 (ldeclaracionesg -> global ID .)
    print           reduce using rule 26 (ldeclaracionesg -> global ID .)
    for             reduce using rule 26 (ldeclaracionesg -> global ID .)
    return          reduce using rule 26 (ldeclaracionesg -> global ID .)
    ARROBA          reduce using rule 26 (ldeclaracionesg -> global ID .)
    ejecutar        reduce using rule 26 (ldeclaracionesg -> global ID .)
    goto            reduce using rule 26 (ldeclaracionesg -> global ID .)
    label           reduce using rule 26 (ldeclaracionesg -> global ID .)
    $end            reduce using rule 26 (ldeclaracionesg -> global ID .)


state 43

    (31) ldeclaracionesg -> print PARIZQ . expresiones PARDER
    (32) ldeclaracionesg -> print PARIZQ . ID CADENA PARDER
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 77
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 76
    expre                          shift and go to state 56

state 44

    (39) ldeclaracionesg -> for ID . in lidsp DOS_PUNTOS

    in              shift and go to state 78


state 45

    (11) decorador -> ARROBA with_goto .

    def             reduce using rule 11 (decorador -> ARROBA with_goto .)
    if              reduce using rule 11 (decorador -> ARROBA with_goto .)
    from            reduce using rule 11 (decorador -> ARROBA with_goto .)
    import          reduce using rule 11 (decorador -> ARROBA with_goto .)
    global          reduce using rule 11 (decorador -> ARROBA with_goto .)
    ID              reduce using rule 11 (decorador -> ARROBA with_goto .)
    main            reduce using rule 11 (decorador -> ARROBA with_goto .)
    print           reduce using rule 11 (decorador -> ARROBA with_goto .)
    for             reduce using rule 11 (decorador -> ARROBA with_goto .)
    return          reduce using rule 11 (decorador -> ARROBA with_goto .)
    ARROBA          reduce using rule 11 (decorador -> ARROBA with_goto .)
    ejecutar        reduce using rule 11 (decorador -> ARROBA with_goto .)
    goto            reduce using rule 11 (decorador -> ARROBA with_goto .)
    label           reduce using rule 11 (decorador -> ARROBA with_goto .)
    $end            reduce using rule 11 (decorador -> ARROBA with_goto .)


state 46

    (13) sentLabel -> label PUNTO . ID

    ID              shift and go to state 79


state 47

    (4) instruccion -> def main PARIZQ . PARDER DOS_PUNTOS

    PARDER          shift and go to state 80


state 48

    (5) instruccion -> def ID PARIZQ . PARDER DOS_PUNTOS

    PARDER          shift and go to state 81


state 49

    (30) ldeclaracionesg -> main PARIZQ PARDER .

    def             reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    if              reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    from            reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    import          reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    global          reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    ID              reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    main            reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    print           reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    for             reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    return          reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    ARROBA          reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    ejecutar        reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    goto            reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    label           reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)
    $end            reduce using rule 30 (ldeclaracionesg -> main PARIZQ PARDER .)


state 50

    (29) ldeclaracionesg -> ID PARIZQ PARDER .

    def             reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    if              reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    from            reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    import          reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    global          reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    ID              reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    main            reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    print           reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    for             reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    return          reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    ARROBA          reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    ejecutar        reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    goto            reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    label           reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)
    $end            reduce using rule 29 (ldeclaracionesg -> ID PARIZQ PARDER .)


state 51

    (33) ldeclaracionesg -> ID PUNTO ID . IGUAL expre
    (36) ldeclaracionesg -> ID PUNTO ID . PARIZQ ID PARDER
    (38) ldeclaracionesg -> ID PUNTO ID . IGUAL CORIZQ CORDER

    IGUAL           shift and go to state 82
    PARIZQ          shift and go to state 83


state 52

    (37) ldeclaracionesg -> ID PUNTO ejecutar . PARIZQ ID COMA ID PARDER

    PARIZQ          shift and go to state 84


state 53

    (62) expre -> ID .
    (70) expre -> ID . CADENA
    (73) expre -> ID . CORIZQ expresiones CORDER
    (74) expre -> ID . PARIZQ expresiones PARDER
    (76) expre -> ID . PUNTO ejecutar PARIZQ ID COMA ID PARDER

    CORDER          reduce using rule 62 (expre -> ID .)
    IGUAL           reduce using rule 62 (expre -> ID .)
    MAYORQ          reduce using rule 62 (expre -> ID .)
    MENORQ          reduce using rule 62 (expre -> ID .)
    MAYOR_IGUALQ    reduce using rule 62 (expre -> ID .)
    MENOR_IGUALQ    reduce using rule 62 (expre -> ID .)
    DISTINTO        reduce using rule 62 (expre -> ID .)
    MAS             reduce using rule 62 (expre -> ID .)
    MENOS           reduce using rule 62 (expre -> ID .)
    POR             reduce using rule 62 (expre -> ID .)
    DIVIDIDO        reduce using rule 62 (expre -> ID .)
    EXPONENCIACION  reduce using rule 62 (expre -> ID .)
    MODULO          reduce using rule 62 (expre -> ID .)
    def             reduce using rule 62 (expre -> ID .)
    if              reduce using rule 62 (expre -> ID .)
    from            reduce using rule 62 (expre -> ID .)
    import          reduce using rule 62 (expre -> ID .)
    global          reduce using rule 62 (expre -> ID .)
    ID              reduce using rule 62 (expre -> ID .)
    main            reduce using rule 62 (expre -> ID .)
    print           reduce using rule 62 (expre -> ID .)
    for             reduce using rule 62 (expre -> ID .)
    return          reduce using rule 62 (expre -> ID .)
    ARROBA          reduce using rule 62 (expre -> ID .)
    ejecutar        reduce using rule 62 (expre -> ID .)
    goto            reduce using rule 62 (expre -> ID .)
    label           reduce using rule 62 (expre -> ID .)
    $end            reduce using rule 62 (expre -> ID .)
    PARDER          reduce using rule 62 (expre -> ID .)
    CADENA          shift and go to state 85
    CORIZQ          shift and go to state 86
    PARIZQ          shift and go to state 87
    PUNTO           shift and go to state 88


state 54

    (71) expre -> CORIZQ . CORDER
    (72) expre -> CORIZQ . expresiones CORDER
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    CORDER          shift and go to state 89
    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 90
    expre                          shift and go to state 56

state 55

    (35) ldeclaracionesg -> ID CORIZQ expresiones . CORDER IGUAL expresiones
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          shift and go to state 91
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 56

    (61) expresiones -> expre .

    CORDER          reduce using rule 61 (expresiones -> expre .)
    IGUAL           reduce using rule 61 (expresiones -> expre .)
    MAYORQ          reduce using rule 61 (expresiones -> expre .)
    MENORQ          reduce using rule 61 (expresiones -> expre .)
    MAYOR_IGUALQ    reduce using rule 61 (expresiones -> expre .)
    MENOR_IGUALQ    reduce using rule 61 (expresiones -> expre .)
    DISTINTO        reduce using rule 61 (expresiones -> expre .)
    MAS             reduce using rule 61 (expresiones -> expre .)
    MENOS           reduce using rule 61 (expresiones -> expre .)
    POR             reduce using rule 61 (expresiones -> expre .)
    DIVIDIDO        reduce using rule 61 (expresiones -> expre .)
    EXPONENCIACION  reduce using rule 61 (expresiones -> expre .)
    MODULO          reduce using rule 61 (expresiones -> expre .)
    def             reduce using rule 61 (expresiones -> expre .)
    if              reduce using rule 61 (expresiones -> expre .)
    from            reduce using rule 61 (expresiones -> expre .)
    import          reduce using rule 61 (expresiones -> expre .)
    global          reduce using rule 61 (expresiones -> expre .)
    ID              reduce using rule 61 (expresiones -> expre .)
    main            reduce using rule 61 (expresiones -> expre .)
    print           reduce using rule 61 (expresiones -> expre .)
    for             reduce using rule 61 (expresiones -> expre .)
    return          reduce using rule 61 (expresiones -> expre .)
    ARROBA          reduce using rule 61 (expresiones -> expre .)
    ejecutar        reduce using rule 61 (expresiones -> expre .)
    goto            reduce using rule 61 (expresiones -> expre .)
    label           reduce using rule 61 (expresiones -> expre .)
    $end            reduce using rule 61 (expresiones -> expre .)
    PARDER          reduce using rule 61 (expresiones -> expre .)


state 57

    (63) expre -> ENTERO .

    CORDER          reduce using rule 63 (expre -> ENTERO .)
    IGUAL           reduce using rule 63 (expre -> ENTERO .)
    MAYORQ          reduce using rule 63 (expre -> ENTERO .)
    MENORQ          reduce using rule 63 (expre -> ENTERO .)
    MAYOR_IGUALQ    reduce using rule 63 (expre -> ENTERO .)
    MENOR_IGUALQ    reduce using rule 63 (expre -> ENTERO .)
    DISTINTO        reduce using rule 63 (expre -> ENTERO .)
    MAS             reduce using rule 63 (expre -> ENTERO .)
    MENOS           reduce using rule 63 (expre -> ENTERO .)
    POR             reduce using rule 63 (expre -> ENTERO .)
    DIVIDIDO        reduce using rule 63 (expre -> ENTERO .)
    EXPONENCIACION  reduce using rule 63 (expre -> ENTERO .)
    MODULO          reduce using rule 63 (expre -> ENTERO .)
    def             reduce using rule 63 (expre -> ENTERO .)
    if              reduce using rule 63 (expre -> ENTERO .)
    from            reduce using rule 63 (expre -> ENTERO .)
    import          reduce using rule 63 (expre -> ENTERO .)
    global          reduce using rule 63 (expre -> ENTERO .)
    ID              reduce using rule 63 (expre -> ENTERO .)
    main            reduce using rule 63 (expre -> ENTERO .)
    print           reduce using rule 63 (expre -> ENTERO .)
    for             reduce using rule 63 (expre -> ENTERO .)
    return          reduce using rule 63 (expre -> ENTERO .)
    ARROBA          reduce using rule 63 (expre -> ENTERO .)
    ejecutar        reduce using rule 63 (expre -> ENTERO .)
    goto            reduce using rule 63 (expre -> ENTERO .)
    label           reduce using rule 63 (expre -> ENTERO .)
    $end            reduce using rule 63 (expre -> ENTERO .)
    PARDER          reduce using rule 63 (expre -> ENTERO .)


state 58

    (64) expre -> FDECIMAL .

    CORDER          reduce using rule 64 (expre -> FDECIMAL .)
    IGUAL           reduce using rule 64 (expre -> FDECIMAL .)
    MAYORQ          reduce using rule 64 (expre -> FDECIMAL .)
    MENORQ          reduce using rule 64 (expre -> FDECIMAL .)
    MAYOR_IGUALQ    reduce using rule 64 (expre -> FDECIMAL .)
    MENOR_IGUALQ    reduce using rule 64 (expre -> FDECIMAL .)
    DISTINTO        reduce using rule 64 (expre -> FDECIMAL .)
    MAS             reduce using rule 64 (expre -> FDECIMAL .)
    MENOS           reduce using rule 64 (expre -> FDECIMAL .)
    POR             reduce using rule 64 (expre -> FDECIMAL .)
    DIVIDIDO        reduce using rule 64 (expre -> FDECIMAL .)
    EXPONENCIACION  reduce using rule 64 (expre -> FDECIMAL .)
    MODULO          reduce using rule 64 (expre -> FDECIMAL .)
    def             reduce using rule 64 (expre -> FDECIMAL .)
    if              reduce using rule 64 (expre -> FDECIMAL .)
    from            reduce using rule 64 (expre -> FDECIMAL .)
    import          reduce using rule 64 (expre -> FDECIMAL .)
    global          reduce using rule 64 (expre -> FDECIMAL .)
    ID              reduce using rule 64 (expre -> FDECIMAL .)
    main            reduce using rule 64 (expre -> FDECIMAL .)
    print           reduce using rule 64 (expre -> FDECIMAL .)
    for             reduce using rule 64 (expre -> FDECIMAL .)
    return          reduce using rule 64 (expre -> FDECIMAL .)
    ARROBA          reduce using rule 64 (expre -> FDECIMAL .)
    ejecutar        reduce using rule 64 (expre -> FDECIMAL .)
    goto            reduce using rule 64 (expre -> FDECIMAL .)
    label           reduce using rule 64 (expre -> FDECIMAL .)
    $end            reduce using rule 64 (expre -> FDECIMAL .)
    PARDER          reduce using rule 64 (expre -> FDECIMAL .)


state 59

    (65) expre -> CARACTER .

    CORDER          reduce using rule 65 (expre -> CARACTER .)
    IGUAL           reduce using rule 65 (expre -> CARACTER .)
    MAYORQ          reduce using rule 65 (expre -> CARACTER .)
    MENORQ          reduce using rule 65 (expre -> CARACTER .)
    MAYOR_IGUALQ    reduce using rule 65 (expre -> CARACTER .)
    MENOR_IGUALQ    reduce using rule 65 (expre -> CARACTER .)
    DISTINTO        reduce using rule 65 (expre -> CARACTER .)
    MAS             reduce using rule 65 (expre -> CARACTER .)
    MENOS           reduce using rule 65 (expre -> CARACTER .)
    POR             reduce using rule 65 (expre -> CARACTER .)
    DIVIDIDO        reduce using rule 65 (expre -> CARACTER .)
    EXPONENCIACION  reduce using rule 65 (expre -> CARACTER .)
    MODULO          reduce using rule 65 (expre -> CARACTER .)
    def             reduce using rule 65 (expre -> CARACTER .)
    if              reduce using rule 65 (expre -> CARACTER .)
    from            reduce using rule 65 (expre -> CARACTER .)
    import          reduce using rule 65 (expre -> CARACTER .)
    global          reduce using rule 65 (expre -> CARACTER .)
    ID              reduce using rule 65 (expre -> CARACTER .)
    main            reduce using rule 65 (expre -> CARACTER .)
    print           reduce using rule 65 (expre -> CARACTER .)
    for             reduce using rule 65 (expre -> CARACTER .)
    return          reduce using rule 65 (expre -> CARACTER .)
    ARROBA          reduce using rule 65 (expre -> CARACTER .)
    ejecutar        reduce using rule 65 (expre -> CARACTER .)
    goto            reduce using rule 65 (expre -> CARACTER .)
    label           reduce using rule 65 (expre -> CARACTER .)
    $end            reduce using rule 65 (expre -> CARACTER .)
    PARDER          reduce using rule 65 (expre -> CARACTER .)


state 60

    (66) expre -> None .

    CORDER          reduce using rule 66 (expre -> None .)
    IGUAL           reduce using rule 66 (expre -> None .)
    MAYORQ          reduce using rule 66 (expre -> None .)
    MENORQ          reduce using rule 66 (expre -> None .)
    MAYOR_IGUALQ    reduce using rule 66 (expre -> None .)
    MENOR_IGUALQ    reduce using rule 66 (expre -> None .)
    DISTINTO        reduce using rule 66 (expre -> None .)
    MAS             reduce using rule 66 (expre -> None .)
    MENOS           reduce using rule 66 (expre -> None .)
    POR             reduce using rule 66 (expre -> None .)
    DIVIDIDO        reduce using rule 66 (expre -> None .)
    EXPONENCIACION  reduce using rule 66 (expre -> None .)
    MODULO          reduce using rule 66 (expre -> None .)
    def             reduce using rule 66 (expre -> None .)
    if              reduce using rule 66 (expre -> None .)
    from            reduce using rule 66 (expre -> None .)
    import          reduce using rule 66 (expre -> None .)
    global          reduce using rule 66 (expre -> None .)
    ID              reduce using rule 66 (expre -> None .)
    main            reduce using rule 66 (expre -> None .)
    print           reduce using rule 66 (expre -> None .)
    for             reduce using rule 66 (expre -> None .)
    return          reduce using rule 66 (expre -> None .)
    ARROBA          reduce using rule 66 (expre -> None .)
    ejecutar        reduce using rule 66 (expre -> None .)
    goto            reduce using rule 66 (expre -> None .)
    label           reduce using rule 66 (expre -> None .)
    $end            reduce using rule 66 (expre -> None .)
    PARDER          reduce using rule 66 (expre -> None .)


state 61

    (67) expre -> true .

    CORDER          reduce using rule 67 (expre -> true .)
    IGUAL           reduce using rule 67 (expre -> true .)
    MAYORQ          reduce using rule 67 (expre -> true .)
    MENORQ          reduce using rule 67 (expre -> true .)
    MAYOR_IGUALQ    reduce using rule 67 (expre -> true .)
    MENOR_IGUALQ    reduce using rule 67 (expre -> true .)
    DISTINTO        reduce using rule 67 (expre -> true .)
    MAS             reduce using rule 67 (expre -> true .)
    MENOS           reduce using rule 67 (expre -> true .)
    POR             reduce using rule 67 (expre -> true .)
    DIVIDIDO        reduce using rule 67 (expre -> true .)
    EXPONENCIACION  reduce using rule 67 (expre -> true .)
    MODULO          reduce using rule 67 (expre -> true .)
    def             reduce using rule 67 (expre -> true .)
    if              reduce using rule 67 (expre -> true .)
    from            reduce using rule 67 (expre -> true .)
    import          reduce using rule 67 (expre -> true .)
    global          reduce using rule 67 (expre -> true .)
    ID              reduce using rule 67 (expre -> true .)
    main            reduce using rule 67 (expre -> true .)
    print           reduce using rule 67 (expre -> true .)
    for             reduce using rule 67 (expre -> true .)
    return          reduce using rule 67 (expre -> true .)
    ARROBA          reduce using rule 67 (expre -> true .)
    ejecutar        reduce using rule 67 (expre -> true .)
    goto            reduce using rule 67 (expre -> true .)
    label           reduce using rule 67 (expre -> true .)
    $end            reduce using rule 67 (expre -> true .)
    PARDER          reduce using rule 67 (expre -> true .)


state 62

    (68) expre -> false .

    CORDER          reduce using rule 68 (expre -> false .)
    IGUAL           reduce using rule 68 (expre -> false .)
    MAYORQ          reduce using rule 68 (expre -> false .)
    MENORQ          reduce using rule 68 (expre -> false .)
    MAYOR_IGUALQ    reduce using rule 68 (expre -> false .)
    MENOR_IGUALQ    reduce using rule 68 (expre -> false .)
    DISTINTO        reduce using rule 68 (expre -> false .)
    MAS             reduce using rule 68 (expre -> false .)
    MENOS           reduce using rule 68 (expre -> false .)
    POR             reduce using rule 68 (expre -> false .)
    DIVIDIDO        reduce using rule 68 (expre -> false .)
    EXPONENCIACION  reduce using rule 68 (expre -> false .)
    MODULO          reduce using rule 68 (expre -> false .)
    def             reduce using rule 68 (expre -> false .)
    if              reduce using rule 68 (expre -> false .)
    from            reduce using rule 68 (expre -> false .)
    import          reduce using rule 68 (expre -> false .)
    global          reduce using rule 68 (expre -> false .)
    ID              reduce using rule 68 (expre -> false .)
    main            reduce using rule 68 (expre -> false .)
    print           reduce using rule 68 (expre -> false .)
    for             reduce using rule 68 (expre -> false .)
    return          reduce using rule 68 (expre -> false .)
    ARROBA          reduce using rule 68 (expre -> false .)
    ejecutar        reduce using rule 68 (expre -> false .)
    goto            reduce using rule 68 (expre -> false .)
    label           reduce using rule 68 (expre -> false .)
    $end            reduce using rule 68 (expre -> false .)
    PARDER          reduce using rule 68 (expre -> false .)


state 63

    (69) expre -> CADENA .

    CORDER          reduce using rule 69 (expre -> CADENA .)
    IGUAL           reduce using rule 69 (expre -> CADENA .)
    MAYORQ          reduce using rule 69 (expre -> CADENA .)
    MENORQ          reduce using rule 69 (expre -> CADENA .)
    MAYOR_IGUALQ    reduce using rule 69 (expre -> CADENA .)
    MENOR_IGUALQ    reduce using rule 69 (expre -> CADENA .)
    DISTINTO        reduce using rule 69 (expre -> CADENA .)
    MAS             reduce using rule 69 (expre -> CADENA .)
    MENOS           reduce using rule 69 (expre -> CADENA .)
    POR             reduce using rule 69 (expre -> CADENA .)
    DIVIDIDO        reduce using rule 69 (expre -> CADENA .)
    EXPONENCIACION  reduce using rule 69 (expre -> CADENA .)
    MODULO          reduce using rule 69 (expre -> CADENA .)
    def             reduce using rule 69 (expre -> CADENA .)
    if              reduce using rule 69 (expre -> CADENA .)
    from            reduce using rule 69 (expre -> CADENA .)
    import          reduce using rule 69 (expre -> CADENA .)
    global          reduce using rule 69 (expre -> CADENA .)
    ID              reduce using rule 69 (expre -> CADENA .)
    main            reduce using rule 69 (expre -> CADENA .)
    print           reduce using rule 69 (expre -> CADENA .)
    for             reduce using rule 69 (expre -> CADENA .)
    return          reduce using rule 69 (expre -> CADENA .)
    ARROBA          reduce using rule 69 (expre -> CADENA .)
    ejecutar        reduce using rule 69 (expre -> CADENA .)
    goto            reduce using rule 69 (expre -> CADENA .)
    label           reduce using rule 69 (expre -> CADENA .)
    $end            reduce using rule 69 (expre -> CADENA .)
    PARDER          reduce using rule 69 (expre -> CADENA .)


state 64

    (75) expre -> ejecutar_analisis . PARIZQ ID PARDER

    PARIZQ          shift and go to state 104


state 65

    (9) instruccion -> if PARIZQ expre . relacional expre PARDER DOS_PUNTOS
    (55) relacional -> . IGUAL IGUAL
    (56) relacional -> . MAYORQ
    (57) relacional -> . MENORQ
    (58) relacional -> . MAYOR_IGUALQ
    (59) relacional -> . MENOR_IGUALQ
    (60) relacional -> . DISTINTO

    IGUAL           shift and go to state 106
    MAYORQ          shift and go to state 107
    MENORQ          shift and go to state 108
    MAYOR_IGUALQ    shift and go to state 109
    MENOR_IGUALQ    shift and go to state 110
    DISTINTO        shift and go to state 111

    relacional                     shift and go to state 105

state 66

    (10) instruccion -> if NAME IGUAL . IGUAL CADENA DOS_PUNTOS

    IGUAL           shift and go to state 112


state 67

    (14) importacion -> from goto import . with_goto importas

    with_goto       shift and go to state 113


state 68

    (15) importacion -> from lidsp import . POR importas
    (16) importacion -> from lidsp import . ID importas

    POR             shift and go to state 114
    ID              shift and go to state 115


state 69

    (12) sentGoto -> goto PUNTO ID .

    def             reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    if              reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    from            reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    import          reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    global          reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    ID              reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    main            reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    print           reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    for             reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    return          reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    ARROBA          reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    ejecutar        reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    goto            reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    label           reduce using rule 12 (sentGoto -> goto PUNTO ID .)
    $end            reduce using rule 12 (sentGoto -> goto PUNTO ID .)


state 70

    (19) importacion -> import lidsp importas .

    def             reduce using rule 19 (importacion -> import lidsp importas .)
    if              reduce using rule 19 (importacion -> import lidsp importas .)
    from            reduce using rule 19 (importacion -> import lidsp importas .)
    import          reduce using rule 19 (importacion -> import lidsp importas .)
    global          reduce using rule 19 (importacion -> import lidsp importas .)
    ID              reduce using rule 19 (importacion -> import lidsp importas .)
    main            reduce using rule 19 (importacion -> import lidsp importas .)
    print           reduce using rule 19 (importacion -> import lidsp importas .)
    for             reduce using rule 19 (importacion -> import lidsp importas .)
    return          reduce using rule 19 (importacion -> import lidsp importas .)
    ARROBA          reduce using rule 19 (importacion -> import lidsp importas .)
    ejecutar        reduce using rule 19 (importacion -> import lidsp importas .)
    goto            reduce using rule 19 (importacion -> import lidsp importas .)
    label           reduce using rule 19 (importacion -> import lidsp importas .)
    $end            reduce using rule 19 (importacion -> import lidsp importas .)


state 71

    (17) importas -> as . ID

    ID              shift and go to state 116


state 72

    (27) ldeclaracionesg -> lidsp PARIZQ ID . COMA ID PARDER

    COMA            shift and go to state 117


state 73

    (28) ldeclaracionesg -> lidsp PARIZQ PARDER .

    def             reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    if              reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    from            reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    import          reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    global          reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    ID              reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    main            reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    print           reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    for             reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    return          reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    ARROBA          reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    ejecutar        reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    goto            reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    label           reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)
    $end            reduce using rule 28 (ldeclaracionesg -> lidsp PARIZQ PARDER .)


state 74

    (34) ldeclaracionesg -> lidsp IGUAL expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    def             reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    if              reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    from            reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    import          reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    global          reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    ID              reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    main            reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    print           reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    for             reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    return          reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    ARROBA          reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    ejecutar        reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    goto            reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    label           reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    $end            reduce using rule 34 (ldeclaracionesg -> lidsp IGUAL expresiones .)
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 75

    (20) lidsp -> lidsp PUNTO ID .

    PARIZQ          reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    IGUAL           reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    PUNTO           reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    import          reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    as              reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    def             reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    if              reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    from            reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    global          reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    ID              reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    main            reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    print           reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    for             reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    return          reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    ARROBA          reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    ejecutar        reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    goto            reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    label           reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    $end            reduce using rule 20 (lidsp -> lidsp PUNTO ID .)
    DOS_PUNTOS      reduce using rule 20 (lidsp -> lidsp PUNTO ID .)


state 76

    (31) ldeclaracionesg -> print PARIZQ expresiones . PARDER
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    PARDER          shift and go to state 118
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 77

    (32) ldeclaracionesg -> print PARIZQ ID . CADENA PARDER
    (62) expre -> ID .
    (70) expre -> ID . CADENA
    (73) expre -> ID . CORIZQ expresiones CORDER
    (74) expre -> ID . PARIZQ expresiones PARDER
    (76) expre -> ID . PUNTO ejecutar PARIZQ ID COMA ID PARDER

    CADENA          shift and go to state 119
    PARDER          reduce using rule 62 (expre -> ID .)
    IGUAL           reduce using rule 62 (expre -> ID .)
    MAYORQ          reduce using rule 62 (expre -> ID .)
    MENORQ          reduce using rule 62 (expre -> ID .)
    MAYOR_IGUALQ    reduce using rule 62 (expre -> ID .)
    MENOR_IGUALQ    reduce using rule 62 (expre -> ID .)
    DISTINTO        reduce using rule 62 (expre -> ID .)
    MAS             reduce using rule 62 (expre -> ID .)
    MENOS           reduce using rule 62 (expre -> ID .)
    POR             reduce using rule 62 (expre -> ID .)
    DIVIDIDO        reduce using rule 62 (expre -> ID .)
    EXPONENCIACION  reduce using rule 62 (expre -> ID .)
    MODULO          reduce using rule 62 (expre -> ID .)
    CORIZQ          shift and go to state 86
    PARIZQ          shift and go to state 87
    PUNTO           shift and go to state 88


state 78

    (39) ldeclaracionesg -> for ID in . lidsp DOS_PUNTOS
    (20) lidsp -> . lidsp PUNTO ID
    (21) lidsp -> . ID
    (22) lidsp -> . main
    (23) lidsp -> . ejecutar

    ID              shift and go to state 35
    main            shift and go to state 36
    ejecutar        shift and go to state 17

    lidsp                          shift and go to state 120

state 79

    (13) sentLabel -> label PUNTO ID .

    def             reduce using rule 13 (sentLabel -> label PUNTO ID .)
    if              reduce using rule 13 (sentLabel -> label PUNTO ID .)
    from            reduce using rule 13 (sentLabel -> label PUNTO ID .)
    import          reduce using rule 13 (sentLabel -> label PUNTO ID .)
    global          reduce using rule 13 (sentLabel -> label PUNTO ID .)
    ID              reduce using rule 13 (sentLabel -> label PUNTO ID .)
    main            reduce using rule 13 (sentLabel -> label PUNTO ID .)
    print           reduce using rule 13 (sentLabel -> label PUNTO ID .)
    for             reduce using rule 13 (sentLabel -> label PUNTO ID .)
    return          reduce using rule 13 (sentLabel -> label PUNTO ID .)
    ARROBA          reduce using rule 13 (sentLabel -> label PUNTO ID .)
    ejecutar        reduce using rule 13 (sentLabel -> label PUNTO ID .)
    goto            reduce using rule 13 (sentLabel -> label PUNTO ID .)
    label           reduce using rule 13 (sentLabel -> label PUNTO ID .)
    $end            reduce using rule 13 (sentLabel -> label PUNTO ID .)


state 80

    (4) instruccion -> def main PARIZQ PARDER . DOS_PUNTOS

    DOS_PUNTOS      shift and go to state 121


state 81

    (5) instruccion -> def ID PARIZQ PARDER . DOS_PUNTOS

    DOS_PUNTOS      shift and go to state 122


state 82

    (33) ldeclaracionesg -> ID PUNTO ID IGUAL . expre
    (38) ldeclaracionesg -> ID PUNTO ID IGUAL . CORIZQ CORDER
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    CORIZQ          shift and go to state 124
    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    ejecutar_analisis shift and go to state 64

    expre                          shift and go to state 123

state 83

    (36) ldeclaracionesg -> ID PUNTO ID PARIZQ . ID PARDER

    ID              shift and go to state 125


state 84

    (37) ldeclaracionesg -> ID PUNTO ejecutar PARIZQ . ID COMA ID PARDER

    ID              shift and go to state 126


state 85

    (70) expre -> ID CADENA .

    CORDER          reduce using rule 70 (expre -> ID CADENA .)
    IGUAL           reduce using rule 70 (expre -> ID CADENA .)
    MAYORQ          reduce using rule 70 (expre -> ID CADENA .)
    MENORQ          reduce using rule 70 (expre -> ID CADENA .)
    MAYOR_IGUALQ    reduce using rule 70 (expre -> ID CADENA .)
    MENOR_IGUALQ    reduce using rule 70 (expre -> ID CADENA .)
    DISTINTO        reduce using rule 70 (expre -> ID CADENA .)
    MAS             reduce using rule 70 (expre -> ID CADENA .)
    MENOS           reduce using rule 70 (expre -> ID CADENA .)
    POR             reduce using rule 70 (expre -> ID CADENA .)
    DIVIDIDO        reduce using rule 70 (expre -> ID CADENA .)
    EXPONENCIACION  reduce using rule 70 (expre -> ID CADENA .)
    MODULO          reduce using rule 70 (expre -> ID CADENA .)
    def             reduce using rule 70 (expre -> ID CADENA .)
    if              reduce using rule 70 (expre -> ID CADENA .)
    from            reduce using rule 70 (expre -> ID CADENA .)
    import          reduce using rule 70 (expre -> ID CADENA .)
    global          reduce using rule 70 (expre -> ID CADENA .)
    ID              reduce using rule 70 (expre -> ID CADENA .)
    main            reduce using rule 70 (expre -> ID CADENA .)
    print           reduce using rule 70 (expre -> ID CADENA .)
    for             reduce using rule 70 (expre -> ID CADENA .)
    return          reduce using rule 70 (expre -> ID CADENA .)
    ARROBA          reduce using rule 70 (expre -> ID CADENA .)
    ejecutar        reduce using rule 70 (expre -> ID CADENA .)
    goto            reduce using rule 70 (expre -> ID CADENA .)
    label           reduce using rule 70 (expre -> ID CADENA .)
    $end            reduce using rule 70 (expre -> ID CADENA .)
    PARDER          reduce using rule 70 (expre -> ID CADENA .)


state 86

    (73) expre -> ID CORIZQ . expresiones CORDER
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 127
    expre                          shift and go to state 56

state 87

    (74) expre -> ID PARIZQ . expresiones PARDER
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 128
    expre                          shift and go to state 56

state 88

    (76) expre -> ID PUNTO . ejecutar PARIZQ ID COMA ID PARDER

    ejecutar        shift and go to state 129


state 89

    (71) expre -> CORIZQ CORDER .

    CORDER          reduce using rule 71 (expre -> CORIZQ CORDER .)
    IGUAL           reduce using rule 71 (expre -> CORIZQ CORDER .)
    MAYORQ          reduce using rule 71 (expre -> CORIZQ CORDER .)
    MENORQ          reduce using rule 71 (expre -> CORIZQ CORDER .)
    MAYOR_IGUALQ    reduce using rule 71 (expre -> CORIZQ CORDER .)
    MENOR_IGUALQ    reduce using rule 71 (expre -> CORIZQ CORDER .)
    DISTINTO        reduce using rule 71 (expre -> CORIZQ CORDER .)
    MAS             reduce using rule 71 (expre -> CORIZQ CORDER .)
    MENOS           reduce using rule 71 (expre -> CORIZQ CORDER .)
    POR             reduce using rule 71 (expre -> CORIZQ CORDER .)
    DIVIDIDO        reduce using rule 71 (expre -> CORIZQ CORDER .)
    EXPONENCIACION  reduce using rule 71 (expre -> CORIZQ CORDER .)
    MODULO          reduce using rule 71 (expre -> CORIZQ CORDER .)
    def             reduce using rule 71 (expre -> CORIZQ CORDER .)
    if              reduce using rule 71 (expre -> CORIZQ CORDER .)
    from            reduce using rule 71 (expre -> CORIZQ CORDER .)
    import          reduce using rule 71 (expre -> CORIZQ CORDER .)
    global          reduce using rule 71 (expre -> CORIZQ CORDER .)
    ID              reduce using rule 71 (expre -> CORIZQ CORDER .)
    main            reduce using rule 71 (expre -> CORIZQ CORDER .)
    print           reduce using rule 71 (expre -> CORIZQ CORDER .)
    for             reduce using rule 71 (expre -> CORIZQ CORDER .)
    return          reduce using rule 71 (expre -> CORIZQ CORDER .)
    ARROBA          reduce using rule 71 (expre -> CORIZQ CORDER .)
    ejecutar        reduce using rule 71 (expre -> CORIZQ CORDER .)
    goto            reduce using rule 71 (expre -> CORIZQ CORDER .)
    label           reduce using rule 71 (expre -> CORIZQ CORDER .)
    $end            reduce using rule 71 (expre -> CORIZQ CORDER .)
    PARDER          reduce using rule 71 (expre -> CORIZQ CORDER .)


state 90

    (72) expre -> CORIZQ expresiones . CORDER
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          shift and go to state 130
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 91

    (35) ldeclaracionesg -> ID CORIZQ expresiones CORDER . IGUAL expresiones

    IGUAL           shift and go to state 131


state 92

    (43) expresiones -> expresiones IGUAL . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 132
    expre                          shift and go to state 56

state 93

    (44) expresiones -> expresiones MAYORQ . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 133
    expre                          shift and go to state 56

state 94

    (45) expresiones -> expresiones MENORQ . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 134
    expre                          shift and go to state 56

state 95

    (46) expresiones -> expresiones MAYOR_IGUALQ . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 135
    expre                          shift and go to state 56

state 96

    (47) expresiones -> expresiones MENOR_IGUALQ . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 136
    expre                          shift and go to state 56

state 97

    (48) expresiones -> expresiones DISTINTO . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 137
    expre                          shift and go to state 56

state 98

    (49) expresiones -> expresiones MAS . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 138
    expre                          shift and go to state 56

state 99

    (50) expresiones -> expresiones MENOS . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 139
    expre                          shift and go to state 56

state 100

    (51) expresiones -> expresiones POR . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 140
    expre                          shift and go to state 56

state 101

    (52) expresiones -> expresiones DIVIDIDO . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 141
    expre                          shift and go to state 56

state 102

    (53) expresiones -> expresiones EXPONENCIACION . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 142
    expre                          shift and go to state 56

state 103

    (54) expresiones -> expresiones MODULO . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 143
    expre                          shift and go to state 56

state 104

    (75) expre -> ejecutar_analisis PARIZQ . ID PARDER

    ID              shift and go to state 144


state 105

    (9) instruccion -> if PARIZQ expre relacional . expre PARDER DOS_PUNTOS
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expre                          shift and go to state 145

state 106

    (55) relacional -> IGUAL . IGUAL

    IGUAL           shift and go to state 146


state 107

    (56) relacional -> MAYORQ .

    ID              reduce using rule 56 (relacional -> MAYORQ .)
    ENTERO          reduce using rule 56 (relacional -> MAYORQ .)
    FDECIMAL        reduce using rule 56 (relacional -> MAYORQ .)
    CARACTER        reduce using rule 56 (relacional -> MAYORQ .)
    None            reduce using rule 56 (relacional -> MAYORQ .)
    true            reduce using rule 56 (relacional -> MAYORQ .)
    false           reduce using rule 56 (relacional -> MAYORQ .)
    CADENA          reduce using rule 56 (relacional -> MAYORQ .)
    CORIZQ          reduce using rule 56 (relacional -> MAYORQ .)
    ejecutar_analisis reduce using rule 56 (relacional -> MAYORQ .)


state 108

    (57) relacional -> MENORQ .

    ID              reduce using rule 57 (relacional -> MENORQ .)
    ENTERO          reduce using rule 57 (relacional -> MENORQ .)
    FDECIMAL        reduce using rule 57 (relacional -> MENORQ .)
    CARACTER        reduce using rule 57 (relacional -> MENORQ .)
    None            reduce using rule 57 (relacional -> MENORQ .)
    true            reduce using rule 57 (relacional -> MENORQ .)
    false           reduce using rule 57 (relacional -> MENORQ .)
    CADENA          reduce using rule 57 (relacional -> MENORQ .)
    CORIZQ          reduce using rule 57 (relacional -> MENORQ .)
    ejecutar_analisis reduce using rule 57 (relacional -> MENORQ .)


state 109

    (58) relacional -> MAYOR_IGUALQ .

    ID              reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    ENTERO          reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    FDECIMAL        reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    CARACTER        reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    None            reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    true            reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    false           reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    CADENA          reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    CORIZQ          reduce using rule 58 (relacional -> MAYOR_IGUALQ .)
    ejecutar_analisis reduce using rule 58 (relacional -> MAYOR_IGUALQ .)


state 110

    (59) relacional -> MENOR_IGUALQ .

    ID              reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    ENTERO          reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    FDECIMAL        reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    CARACTER        reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    None            reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    true            reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    false           reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    CADENA          reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    CORIZQ          reduce using rule 59 (relacional -> MENOR_IGUALQ .)
    ejecutar_analisis reduce using rule 59 (relacional -> MENOR_IGUALQ .)


state 111

    (60) relacional -> DISTINTO .

    ID              reduce using rule 60 (relacional -> DISTINTO .)
    ENTERO          reduce using rule 60 (relacional -> DISTINTO .)
    FDECIMAL        reduce using rule 60 (relacional -> DISTINTO .)
    CARACTER        reduce using rule 60 (relacional -> DISTINTO .)
    None            reduce using rule 60 (relacional -> DISTINTO .)
    true            reduce using rule 60 (relacional -> DISTINTO .)
    false           reduce using rule 60 (relacional -> DISTINTO .)
    CADENA          reduce using rule 60 (relacional -> DISTINTO .)
    CORIZQ          reduce using rule 60 (relacional -> DISTINTO .)
    ejecutar_analisis reduce using rule 60 (relacional -> DISTINTO .)


state 112

    (10) instruccion -> if NAME IGUAL IGUAL . CADENA DOS_PUNTOS

    CADENA          shift and go to state 147


state 113

    (14) importacion -> from goto import with_goto . importas
    (17) importas -> . as ID
    (18) importas -> .

    as              shift and go to state 71
    def             reduce using rule 18 (importas -> .)
    if              reduce using rule 18 (importas -> .)
    from            reduce using rule 18 (importas -> .)
    import          reduce using rule 18 (importas -> .)
    global          reduce using rule 18 (importas -> .)
    ID              reduce using rule 18 (importas -> .)
    main            reduce using rule 18 (importas -> .)
    print           reduce using rule 18 (importas -> .)
    for             reduce using rule 18 (importas -> .)
    return          reduce using rule 18 (importas -> .)
    ARROBA          reduce using rule 18 (importas -> .)
    ejecutar        reduce using rule 18 (importas -> .)
    goto            reduce using rule 18 (importas -> .)
    label           reduce using rule 18 (importas -> .)
    $end            reduce using rule 18 (importas -> .)

    importas                       shift and go to state 148

state 114

    (15) importacion -> from lidsp import POR . importas
    (17) importas -> . as ID
    (18) importas -> .

    as              shift and go to state 71
    def             reduce using rule 18 (importas -> .)
    if              reduce using rule 18 (importas -> .)
    from            reduce using rule 18 (importas -> .)
    import          reduce using rule 18 (importas -> .)
    global          reduce using rule 18 (importas -> .)
    ID              reduce using rule 18 (importas -> .)
    main            reduce using rule 18 (importas -> .)
    print           reduce using rule 18 (importas -> .)
    for             reduce using rule 18 (importas -> .)
    return          reduce using rule 18 (importas -> .)
    ARROBA          reduce using rule 18 (importas -> .)
    ejecutar        reduce using rule 18 (importas -> .)
    goto            reduce using rule 18 (importas -> .)
    label           reduce using rule 18 (importas -> .)
    $end            reduce using rule 18 (importas -> .)

    importas                       shift and go to state 149

state 115

    (16) importacion -> from lidsp import ID . importas
    (17) importas -> . as ID
    (18) importas -> .

    as              shift and go to state 71
    def             reduce using rule 18 (importas -> .)
    if              reduce using rule 18 (importas -> .)
    from            reduce using rule 18 (importas -> .)
    import          reduce using rule 18 (importas -> .)
    global          reduce using rule 18 (importas -> .)
    ID              reduce using rule 18 (importas -> .)
    main            reduce using rule 18 (importas -> .)
    print           reduce using rule 18 (importas -> .)
    for             reduce using rule 18 (importas -> .)
    return          reduce using rule 18 (importas -> .)
    ARROBA          reduce using rule 18 (importas -> .)
    ejecutar        reduce using rule 18 (importas -> .)
    goto            reduce using rule 18 (importas -> .)
    label           reduce using rule 18 (importas -> .)
    $end            reduce using rule 18 (importas -> .)

    importas                       shift and go to state 150

state 116

    (17) importas -> as ID .

    def             reduce using rule 17 (importas -> as ID .)
    if              reduce using rule 17 (importas -> as ID .)
    from            reduce using rule 17 (importas -> as ID .)
    import          reduce using rule 17 (importas -> as ID .)
    global          reduce using rule 17 (importas -> as ID .)
    ID              reduce using rule 17 (importas -> as ID .)
    main            reduce using rule 17 (importas -> as ID .)
    print           reduce using rule 17 (importas -> as ID .)
    for             reduce using rule 17 (importas -> as ID .)
    return          reduce using rule 17 (importas -> as ID .)
    ARROBA          reduce using rule 17 (importas -> as ID .)
    ejecutar        reduce using rule 17 (importas -> as ID .)
    goto            reduce using rule 17 (importas -> as ID .)
    label           reduce using rule 17 (importas -> as ID .)
    $end            reduce using rule 17 (importas -> as ID .)


state 117

    (27) ldeclaracionesg -> lidsp PARIZQ ID COMA . ID PARDER

    ID              shift and go to state 151


state 118

    (31) ldeclaracionesg -> print PARIZQ expresiones PARDER .

    def             reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    if              reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    from            reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    import          reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    global          reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    ID              reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    main            reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    print           reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    for             reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    return          reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    ARROBA          reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    ejecutar        reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    goto            reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    label           reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)
    $end            reduce using rule 31 (ldeclaracionesg -> print PARIZQ expresiones PARDER .)


state 119

    (32) ldeclaracionesg -> print PARIZQ ID CADENA . PARDER
    (70) expre -> ID CADENA .

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 152
    IGUAL           reduce using rule 70 (expre -> ID CADENA .)
    MAYORQ          reduce using rule 70 (expre -> ID CADENA .)
    MENORQ          reduce using rule 70 (expre -> ID CADENA .)
    MAYOR_IGUALQ    reduce using rule 70 (expre -> ID CADENA .)
    MENOR_IGUALQ    reduce using rule 70 (expre -> ID CADENA .)
    DISTINTO        reduce using rule 70 (expre -> ID CADENA .)
    MAS             reduce using rule 70 (expre -> ID CADENA .)
    MENOS           reduce using rule 70 (expre -> ID CADENA .)
    POR             reduce using rule 70 (expre -> ID CADENA .)
    DIVIDIDO        reduce using rule 70 (expre -> ID CADENA .)
    EXPONENCIACION  reduce using rule 70 (expre -> ID CADENA .)
    MODULO          reduce using rule 70 (expre -> ID CADENA .)

  ! PARDER          [ reduce using rule 70 (expre -> ID CADENA .) ]


state 120

    (39) ldeclaracionesg -> for ID in lidsp . DOS_PUNTOS
    (20) lidsp -> lidsp . PUNTO ID

    DOS_PUNTOS      shift and go to state 153
    PUNTO           shift and go to state 41


state 121

    (4) instruccion -> def main PARIZQ PARDER DOS_PUNTOS .

    def             reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    if              reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    from            reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    import          reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    global          reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    ID              reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    main            reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    print           reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    for             reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    return          reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    ARROBA          reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    ejecutar        reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    goto            reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    label           reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)
    $end            reduce using rule 4 (instruccion -> def main PARIZQ PARDER DOS_PUNTOS .)


state 122

    (5) instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .

    def             reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    if              reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    from            reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    import          reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    global          reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    ID              reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    main            reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    print           reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    for             reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    return          reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    ARROBA          reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    ejecutar        reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    goto            reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    label           reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)
    $end            reduce using rule 5 (instruccion -> def ID PARIZQ PARDER DOS_PUNTOS .)


state 123

    (33) ldeclaracionesg -> ID PUNTO ID IGUAL expre .

    def             reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    if              reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    from            reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    import          reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    global          reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    ID              reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    main            reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    print           reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    for             reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    return          reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    ARROBA          reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    ejecutar        reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    goto            reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    label           reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)
    $end            reduce using rule 33 (ldeclaracionesg -> ID PUNTO ID IGUAL expre .)


state 124

    (38) ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ . CORDER
    (71) expre -> CORIZQ . CORDER
    (72) expre -> CORIZQ . expresiones CORDER
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    CORDER          shift and go to state 154
    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 90
    expre                          shift and go to state 56

state 125

    (36) ldeclaracionesg -> ID PUNTO ID PARIZQ ID . PARDER

    PARDER          shift and go to state 155


state 126

    (37) ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID . COMA ID PARDER

    COMA            shift and go to state 156


state 127

    (73) expre -> ID CORIZQ expresiones . CORDER
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          shift and go to state 157
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 128

    (74) expre -> ID PARIZQ expresiones . PARDER
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    PARDER          shift and go to state 158
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 129

    (76) expre -> ID PUNTO ejecutar . PARIZQ ID COMA ID PARDER

    PARIZQ          shift and go to state 159


state 130

    (72) expre -> CORIZQ expresiones CORDER .

    CORDER          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    IGUAL           reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MAYORQ          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MENORQ          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MAYOR_IGUALQ    reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MENOR_IGUALQ    reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    DISTINTO        reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MAS             reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MENOS           reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    POR             reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    DIVIDIDO        reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    EXPONENCIACION  reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    MODULO          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    def             reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    if              reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    from            reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    import          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    global          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    ID              reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    main            reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    print           reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    for             reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    return          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    ARROBA          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    ejecutar        reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    goto            reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    label           reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    $end            reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)
    PARDER          reduce using rule 72 (expre -> CORIZQ expresiones CORDER .)


state 131

    (35) ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL . expresiones
    (43) expresiones -> . expresiones IGUAL expresiones
    (44) expresiones -> . expresiones MAYORQ expresiones
    (45) expresiones -> . expresiones MENORQ expresiones
    (46) expresiones -> . expresiones MAYOR_IGUALQ expresiones
    (47) expresiones -> . expresiones MENOR_IGUALQ expresiones
    (48) expresiones -> . expresiones DISTINTO expresiones
    (49) expresiones -> . expresiones MAS expresiones
    (50) expresiones -> . expresiones MENOS expresiones
    (51) expresiones -> . expresiones POR expresiones
    (52) expresiones -> . expresiones DIVIDIDO expresiones
    (53) expresiones -> . expresiones EXPONENCIACION expresiones
    (54) expresiones -> . expresiones MODULO expresiones
    (61) expresiones -> . expre
    (62) expre -> . ID
    (63) expre -> . ENTERO
    (64) expre -> . FDECIMAL
    (65) expre -> . CARACTER
    (66) expre -> . None
    (67) expre -> . true
    (68) expre -> . false
    (69) expre -> . CADENA
    (70) expre -> . ID CADENA
    (71) expre -> . CORIZQ CORDER
    (72) expre -> . CORIZQ expresiones CORDER
    (73) expre -> . ID CORIZQ expresiones CORDER
    (74) expre -> . ID PARIZQ expresiones PARDER
    (75) expre -> . ejecutar_analisis PARIZQ ID PARDER
    (76) expre -> . ID PUNTO ejecutar PARIZQ ID COMA ID PARDER

    ID              shift and go to state 53
    ENTERO          shift and go to state 57
    FDECIMAL        shift and go to state 58
    CARACTER        shift and go to state 59
    None            shift and go to state 60
    true            shift and go to state 61
    false           shift and go to state 62
    CADENA          shift and go to state 63
    CORIZQ          shift and go to state 54
    ejecutar_analisis shift and go to state 64

    expresiones                    shift and go to state 160
    expre                          shift and go to state 56

state 132

    (43) expresiones -> expresiones IGUAL expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    IGUAL           reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    MAYORQ          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    MENORQ          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    MAYOR_IGUALQ    reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    MENOR_IGUALQ    reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    DISTINTO        reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    def             reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    if              reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    from            reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    import          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    global          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    ID              reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    main            reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    print           reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    for             reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    return          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    ARROBA          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    ejecutar        reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    goto            reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    label           reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    $end            reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    PARDER          reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .)
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! MAS             [ reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .) ]
  ! MENOS           [ reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .) ]
  ! POR             [ reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .) ]
  ! MODULO          [ reduce using rule 43 (expresiones -> expresiones IGUAL expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]


state 133

    (44) expresiones -> expresiones MAYORQ expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    IGUAL           reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    MAYORQ          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    MENORQ          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    MAYOR_IGUALQ    reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    MENOR_IGUALQ    reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    DISTINTO        reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    def             reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    if              reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    from            reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    import          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    global          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    ID              reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    main            reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    print           reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    for             reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    return          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    ARROBA          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    ejecutar        reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    goto            reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    label           reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    $end            reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    PARDER          reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .)
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! MAS             [ reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .) ]
  ! MENOS           [ reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .) ]
  ! POR             [ reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .) ]
  ! MODULO          [ reduce using rule 44 (expresiones -> expresiones MAYORQ expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]


state 134

    (45) expresiones -> expresiones MENORQ expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    IGUAL           reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    MAYORQ          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    MENORQ          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    MAYOR_IGUALQ    reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    MENOR_IGUALQ    reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    DISTINTO        reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    def             reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    if              reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    from            reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    import          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    global          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    ID              reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    main            reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    print           reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    for             reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    return          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    ARROBA          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    ejecutar        reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    goto            reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    label           reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    $end            reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    PARDER          reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .)
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! MAS             [ reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .) ]
  ! MENOS           [ reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .) ]
  ! POR             [ reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .) ]
  ! MODULO          [ reduce using rule 45 (expresiones -> expresiones MENORQ expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]


state 135

    (46) expresiones -> expresiones MAYOR_IGUALQ expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    IGUAL           reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    MAYORQ          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    MENORQ          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    MAYOR_IGUALQ    reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    MENOR_IGUALQ    reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    DISTINTO        reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    def             reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    if              reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    from            reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    import          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    global          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    ID              reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    main            reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    print           reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    for             reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    return          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    ARROBA          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    ejecutar        reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    goto            reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    label           reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    $end            reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    PARDER          reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .)
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! MAS             [ reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .) ]
  ! MENOS           [ reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .) ]
  ! POR             [ reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .) ]
  ! MODULO          [ reduce using rule 46 (expresiones -> expresiones MAYOR_IGUALQ expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]


state 136

    (47) expresiones -> expresiones MENOR_IGUALQ expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    IGUAL           reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    MAYORQ          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    MENORQ          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    MAYOR_IGUALQ    reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    MENOR_IGUALQ    reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    DISTINTO        reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    def             reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    if              reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    from            reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    import          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    global          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    ID              reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    main            reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    print           reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    for             reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    return          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    ARROBA          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    ejecutar        reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    goto            reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    label           reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    $end            reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    PARDER          reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .)
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! MAS             [ reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .) ]
  ! MENOS           [ reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .) ]
  ! POR             [ reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .) ]
  ! MODULO          [ reduce using rule 47 (expresiones -> expresiones MENOR_IGUALQ expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]


state 137

    (48) expresiones -> expresiones DISTINTO expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    IGUAL           reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    MAYORQ          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    MENORQ          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    MAYOR_IGUALQ    reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    MENOR_IGUALQ    reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    DISTINTO        reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    def             reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    if              reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    from            reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    import          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    global          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    ID              reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    main            reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    print           reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    for             reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    return          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    ARROBA          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    ejecutar        reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    goto            reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    label           reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    $end            reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    PARDER          reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .)
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! MAS             [ reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .) ]
  ! MENOS           [ reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .) ]
  ! POR             [ reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .) ]
  ! MODULO          [ reduce using rule 48 (expresiones -> expresiones DISTINTO expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]


state 138

    (49) expresiones -> expresiones MAS expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    IGUAL           reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    MAYORQ          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    MENORQ          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    MAYOR_IGUALQ    reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    MENOR_IGUALQ    reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    DISTINTO        reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    MAS             reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    MENOS           reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    def             reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    if              reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    from            reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    import          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    global          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    ID              reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    main            reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    print           reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    for             reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    return          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    ARROBA          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    ejecutar        reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    goto            reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    label           reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    $end            reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    PARDER          reduce using rule 49 (expresiones -> expresiones MAS expresiones .)
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! POR             [ reduce using rule 49 (expresiones -> expresiones MAS expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 49 (expresiones -> expresiones MAS expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 49 (expresiones -> expresiones MAS expresiones .) ]
  ! MODULO          [ reduce using rule 49 (expresiones -> expresiones MAS expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]
  ! MAS             [ shift and go to state 98 ]
  ! MENOS           [ shift and go to state 99 ]


state 139

    (50) expresiones -> expresiones MENOS expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    IGUAL           reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    MAYORQ          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    MENORQ          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    MAYOR_IGUALQ    reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    MENOR_IGUALQ    reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    DISTINTO        reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    MAS             reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    MENOS           reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    def             reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    if              reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    from            reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    import          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    global          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    ID              reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    main            reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    print           reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    for             reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    return          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    ARROBA          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    ejecutar        reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    goto            reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    label           reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    $end            reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    PARDER          reduce using rule 50 (expresiones -> expresiones MENOS expresiones .)
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103

  ! POR             [ reduce using rule 50 (expresiones -> expresiones MENOS expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 50 (expresiones -> expresiones MENOS expresiones .) ]
  ! EXPONENCIACION  [ reduce using rule 50 (expresiones -> expresiones MENOS expresiones .) ]
  ! MODULO          [ reduce using rule 50 (expresiones -> expresiones MENOS expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]
  ! MAS             [ shift and go to state 98 ]
  ! MENOS           [ shift and go to state 99 ]


state 140

    (51) expresiones -> expresiones POR expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    IGUAL           reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MAYORQ          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MENORQ          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MAYOR_IGUALQ    reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MENOR_IGUALQ    reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    DISTINTO        reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MAS             reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MENOS           reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    POR             reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    DIVIDIDO        reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    EXPONENCIACION  reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    def             reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    if              reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    from            reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    import          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    global          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    ID              reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    main            reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    print           reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    for             reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    return          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    ARROBA          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    ejecutar        reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    goto            reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    label           reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    $end            reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    PARDER          reduce using rule 51 (expresiones -> expresiones POR expresiones .)
    MODULO          shift and go to state 103

  ! MODULO          [ reduce using rule 51 (expresiones -> expresiones POR expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]
  ! MAS             [ shift and go to state 98 ]
  ! MENOS           [ shift and go to state 99 ]
  ! POR             [ shift and go to state 100 ]
  ! DIVIDIDO        [ shift and go to state 101 ]
  ! EXPONENCIACION  [ shift and go to state 102 ]


state 141

    (52) expresiones -> expresiones DIVIDIDO expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    IGUAL           reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MAYORQ          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MENORQ          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MAYOR_IGUALQ    reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MENOR_IGUALQ    reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    DISTINTO        reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MAS             reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MENOS           reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    POR             reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    DIVIDIDO        reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    EXPONENCIACION  reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    def             reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    if              reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    from            reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    import          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    global          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    ID              reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    main            reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    print           reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    for             reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    return          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    ARROBA          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    ejecutar        reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    goto            reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    label           reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    $end            reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    PARDER          reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .)
    MODULO          shift and go to state 103

  ! MODULO          [ reduce using rule 52 (expresiones -> expresiones DIVIDIDO expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]
  ! MAS             [ shift and go to state 98 ]
  ! MENOS           [ shift and go to state 99 ]
  ! POR             [ shift and go to state 100 ]
  ! DIVIDIDO        [ shift and go to state 101 ]
  ! EXPONENCIACION  [ shift and go to state 102 ]


state 142

    (53) expresiones -> expresiones EXPONENCIACION expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    IGUAL           reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    MAYORQ          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    MENORQ          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    MAYOR_IGUALQ    reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    MENOR_IGUALQ    reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    DISTINTO        reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    MAS             reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    MENOS           reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    EXPONENCIACION  reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    def             reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    if              reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    from            reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    import          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    global          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    ID              reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    main            reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    print           reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    for             reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    return          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    ARROBA          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    ejecutar        reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    goto            reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    label           reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    $end            reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    PARDER          reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .)
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    MODULO          shift and go to state 103

  ! POR             [ reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .) ]
  ! DIVIDIDO        [ reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .) ]
  ! MODULO          [ reduce using rule 53 (expresiones -> expresiones EXPONENCIACION expresiones .) ]
  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]
  ! MAS             [ shift and go to state 98 ]
  ! MENOS           [ shift and go to state 99 ]
  ! EXPONENCIACION  [ shift and go to state 102 ]


state 143

    (54) expresiones -> expresiones MODULO expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    CORDER          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    IGUAL           reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MAYORQ          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MENORQ          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MAYOR_IGUALQ    reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MENOR_IGUALQ    reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    DISTINTO        reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MAS             reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MENOS           reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    POR             reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    DIVIDIDO        reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    EXPONENCIACION  reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    MODULO          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    def             reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    if              reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    from            reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    import          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    global          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    ID              reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    main            reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    print           reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    for             reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    return          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    ARROBA          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    ejecutar        reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    goto            reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    label           reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    $end            reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)
    PARDER          reduce using rule 54 (expresiones -> expresiones MODULO expresiones .)

  ! IGUAL           [ shift and go to state 92 ]
  ! MAYORQ          [ shift and go to state 93 ]
  ! MENORQ          [ shift and go to state 94 ]
  ! MAYOR_IGUALQ    [ shift and go to state 95 ]
  ! MENOR_IGUALQ    [ shift and go to state 96 ]
  ! DISTINTO        [ shift and go to state 97 ]
  ! MAS             [ shift and go to state 98 ]
  ! MENOS           [ shift and go to state 99 ]
  ! POR             [ shift and go to state 100 ]
  ! DIVIDIDO        [ shift and go to state 101 ]
  ! EXPONENCIACION  [ shift and go to state 102 ]
  ! MODULO          [ shift and go to state 103 ]


state 144

    (75) expre -> ejecutar_analisis PARIZQ ID . PARDER

    PARDER          shift and go to state 161


state 145

    (9) instruccion -> if PARIZQ expre relacional expre . PARDER DOS_PUNTOS

    PARDER          shift and go to state 162


state 146

    (55) relacional -> IGUAL IGUAL .

    ID              reduce using rule 55 (relacional -> IGUAL IGUAL .)
    ENTERO          reduce using rule 55 (relacional -> IGUAL IGUAL .)
    FDECIMAL        reduce using rule 55 (relacional -> IGUAL IGUAL .)
    CARACTER        reduce using rule 55 (relacional -> IGUAL IGUAL .)
    None            reduce using rule 55 (relacional -> IGUAL IGUAL .)
    true            reduce using rule 55 (relacional -> IGUAL IGUAL .)
    false           reduce using rule 55 (relacional -> IGUAL IGUAL .)
    CADENA          reduce using rule 55 (relacional -> IGUAL IGUAL .)
    CORIZQ          reduce using rule 55 (relacional -> IGUAL IGUAL .)
    ejecutar_analisis reduce using rule 55 (relacional -> IGUAL IGUAL .)


state 147

    (10) instruccion -> if NAME IGUAL IGUAL CADENA . DOS_PUNTOS

    DOS_PUNTOS      shift and go to state 163


state 148

    (14) importacion -> from goto import with_goto importas .

    def             reduce using rule 14 (importacion -> from goto import with_goto importas .)
    if              reduce using rule 14 (importacion -> from goto import with_goto importas .)
    from            reduce using rule 14 (importacion -> from goto import with_goto importas .)
    import          reduce using rule 14 (importacion -> from goto import with_goto importas .)
    global          reduce using rule 14 (importacion -> from goto import with_goto importas .)
    ID              reduce using rule 14 (importacion -> from goto import with_goto importas .)
    main            reduce using rule 14 (importacion -> from goto import with_goto importas .)
    print           reduce using rule 14 (importacion -> from goto import with_goto importas .)
    for             reduce using rule 14 (importacion -> from goto import with_goto importas .)
    return          reduce using rule 14 (importacion -> from goto import with_goto importas .)
    ARROBA          reduce using rule 14 (importacion -> from goto import with_goto importas .)
    ejecutar        reduce using rule 14 (importacion -> from goto import with_goto importas .)
    goto            reduce using rule 14 (importacion -> from goto import with_goto importas .)
    label           reduce using rule 14 (importacion -> from goto import with_goto importas .)
    $end            reduce using rule 14 (importacion -> from goto import with_goto importas .)


state 149

    (15) importacion -> from lidsp import POR importas .

    def             reduce using rule 15 (importacion -> from lidsp import POR importas .)
    if              reduce using rule 15 (importacion -> from lidsp import POR importas .)
    from            reduce using rule 15 (importacion -> from lidsp import POR importas .)
    import          reduce using rule 15 (importacion -> from lidsp import POR importas .)
    global          reduce using rule 15 (importacion -> from lidsp import POR importas .)
    ID              reduce using rule 15 (importacion -> from lidsp import POR importas .)
    main            reduce using rule 15 (importacion -> from lidsp import POR importas .)
    print           reduce using rule 15 (importacion -> from lidsp import POR importas .)
    for             reduce using rule 15 (importacion -> from lidsp import POR importas .)
    return          reduce using rule 15 (importacion -> from lidsp import POR importas .)
    ARROBA          reduce using rule 15 (importacion -> from lidsp import POR importas .)
    ejecutar        reduce using rule 15 (importacion -> from lidsp import POR importas .)
    goto            reduce using rule 15 (importacion -> from lidsp import POR importas .)
    label           reduce using rule 15 (importacion -> from lidsp import POR importas .)
    $end            reduce using rule 15 (importacion -> from lidsp import POR importas .)


state 150

    (16) importacion -> from lidsp import ID importas .

    def             reduce using rule 16 (importacion -> from lidsp import ID importas .)
    if              reduce using rule 16 (importacion -> from lidsp import ID importas .)
    from            reduce using rule 16 (importacion -> from lidsp import ID importas .)
    import          reduce using rule 16 (importacion -> from lidsp import ID importas .)
    global          reduce using rule 16 (importacion -> from lidsp import ID importas .)
    ID              reduce using rule 16 (importacion -> from lidsp import ID importas .)
    main            reduce using rule 16 (importacion -> from lidsp import ID importas .)
    print           reduce using rule 16 (importacion -> from lidsp import ID importas .)
    for             reduce using rule 16 (importacion -> from lidsp import ID importas .)
    return          reduce using rule 16 (importacion -> from lidsp import ID importas .)
    ARROBA          reduce using rule 16 (importacion -> from lidsp import ID importas .)
    ejecutar        reduce using rule 16 (importacion -> from lidsp import ID importas .)
    goto            reduce using rule 16 (importacion -> from lidsp import ID importas .)
    label           reduce using rule 16 (importacion -> from lidsp import ID importas .)
    $end            reduce using rule 16 (importacion -> from lidsp import ID importas .)


state 151

    (27) ldeclaracionesg -> lidsp PARIZQ ID COMA ID . PARDER

    PARDER          shift and go to state 164


state 152

    (32) ldeclaracionesg -> print PARIZQ ID CADENA PARDER .

    def             reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    if              reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    from            reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    import          reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    global          reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    ID              reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    main            reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    print           reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    for             reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    return          reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    ARROBA          reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    ejecutar        reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    goto            reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    label           reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)
    $end            reduce using rule 32 (ldeclaracionesg -> print PARIZQ ID CADENA PARDER .)


state 153

    (39) ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .

    def             reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    if              reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    from            reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    import          reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    global          reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    ID              reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    main            reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    print           reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    for             reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    return          reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    ARROBA          reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    ejecutar        reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    goto            reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    label           reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)
    $end            reduce using rule 39 (ldeclaracionesg -> for ID in lidsp DOS_PUNTOS .)


state 154

    (38) ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .
    (71) expre -> CORIZQ CORDER .

  ! reduce/reduce conflict for def resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for if resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for from resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for import resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for global resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for ID resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for main resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for print resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for for resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for return resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for ARROBA resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for ejecutar resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for goto resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for label resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
  ! reduce/reduce conflict for $end resolved using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    def             reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    if              reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    from            reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    import          reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    global          reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    ID              reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    main            reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    print           reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    for             reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    return          reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    ARROBA          reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    ejecutar        reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    goto            reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    label           reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)
    $end            reduce using rule 38 (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER .)

  ! def             [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! if              [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! from            [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! import          [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! global          [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! ID              [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! main            [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! print           [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! for             [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! return          [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! ARROBA          [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! ejecutar        [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! goto            [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! label           [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]
  ! $end            [ reduce using rule 71 (expre -> CORIZQ CORDER .) ]


state 155

    (36) ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .

    def             reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    if              reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    from            reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    import          reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    global          reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    ID              reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    main            reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    print           reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    for             reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    return          reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    ARROBA          reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    ejecutar        reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    goto            reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    label           reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)
    $end            reduce using rule 36 (ldeclaracionesg -> ID PUNTO ID PARIZQ ID PARDER .)


state 156

    (37) ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA . ID PARDER

    ID              shift and go to state 165


state 157

    (73) expre -> ID CORIZQ expresiones CORDER .

    CORDER          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    IGUAL           reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MAYORQ          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MENORQ          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MAYOR_IGUALQ    reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MENOR_IGUALQ    reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    DISTINTO        reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MAS             reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MENOS           reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    POR             reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    DIVIDIDO        reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    EXPONENCIACION  reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    MODULO          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    def             reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    if              reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    from            reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    import          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    global          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    ID              reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    main            reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    print           reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    for             reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    return          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    ARROBA          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    ejecutar        reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    goto            reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    label           reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    $end            reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)
    PARDER          reduce using rule 73 (expre -> ID CORIZQ expresiones CORDER .)


state 158

    (74) expre -> ID PARIZQ expresiones PARDER .

    CORDER          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    IGUAL           reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MAYORQ          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MENORQ          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MAYOR_IGUALQ    reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MENOR_IGUALQ    reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    DISTINTO        reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MAS             reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MENOS           reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    POR             reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    DIVIDIDO        reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    EXPONENCIACION  reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    MODULO          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    def             reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    if              reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    from            reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    import          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    global          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    ID              reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    main            reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    print           reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    for             reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    return          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    ARROBA          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    ejecutar        reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    goto            reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    label           reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    $end            reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)
    PARDER          reduce using rule 74 (expre -> ID PARIZQ expresiones PARDER .)


state 159

    (76) expre -> ID PUNTO ejecutar PARIZQ . ID COMA ID PARDER

    ID              shift and go to state 166


state 160

    (35) ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .
    (43) expresiones -> expresiones . IGUAL expresiones
    (44) expresiones -> expresiones . MAYORQ expresiones
    (45) expresiones -> expresiones . MENORQ expresiones
    (46) expresiones -> expresiones . MAYOR_IGUALQ expresiones
    (47) expresiones -> expresiones . MENOR_IGUALQ expresiones
    (48) expresiones -> expresiones . DISTINTO expresiones
    (49) expresiones -> expresiones . MAS expresiones
    (50) expresiones -> expresiones . MENOS expresiones
    (51) expresiones -> expresiones . POR expresiones
    (52) expresiones -> expresiones . DIVIDIDO expresiones
    (53) expresiones -> expresiones . EXPONENCIACION expresiones
    (54) expresiones -> expresiones . MODULO expresiones

    def             reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    if              reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    from            reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    import          reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    global          reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    ID              reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    main            reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    print           reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    for             reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    return          reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    ARROBA          reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    ejecutar        reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    goto            reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    label           reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    $end            reduce using rule 35 (ldeclaracionesg -> ID CORIZQ expresiones CORDER IGUAL expresiones .)
    IGUAL           shift and go to state 92
    MAYORQ          shift and go to state 93
    MENORQ          shift and go to state 94
    MAYOR_IGUALQ    shift and go to state 95
    MENOR_IGUALQ    shift and go to state 96
    DISTINTO        shift and go to state 97
    MAS             shift and go to state 98
    MENOS           shift and go to state 99
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    EXPONENCIACION  shift and go to state 102
    MODULO          shift and go to state 103


state 161

    (75) expre -> ejecutar_analisis PARIZQ ID PARDER .

    CORDER          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    IGUAL           reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MAYORQ          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MENORQ          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MAYOR_IGUALQ    reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MENOR_IGUALQ    reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    DISTINTO        reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MAS             reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MENOS           reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    POR             reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    DIVIDIDO        reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    EXPONENCIACION  reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    MODULO          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    def             reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    if              reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    from            reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    import          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    global          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    ID              reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    main            reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    print           reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    for             reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    return          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    ARROBA          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    ejecutar        reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    goto            reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    label           reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    $end            reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)
    PARDER          reduce using rule 75 (expre -> ejecutar_analisis PARIZQ ID PARDER .)


state 162

    (9) instruccion -> if PARIZQ expre relacional expre PARDER . DOS_PUNTOS

    DOS_PUNTOS      shift and go to state 167


state 163

    (10) instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .

    def             reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    if              reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    from            reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    import          reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    global          reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    ID              reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    main            reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    print           reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    for             reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    return          reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    ARROBA          reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    ejecutar        reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    goto            reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    label           reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)
    $end            reduce using rule 10 (instruccion -> if NAME IGUAL IGUAL CADENA DOS_PUNTOS .)


state 164

    (27) ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .

    def             reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    if              reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    from            reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    import          reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    global          reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    ID              reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    main            reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    print           reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    for             reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    return          reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    ARROBA          reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    ejecutar        reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    goto            reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    label           reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)
    $end            reduce using rule 27 (ldeclaracionesg -> lidsp PARIZQ ID COMA ID PARDER .)


state 165

    (37) ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID . PARDER

    PARDER          shift and go to state 168


state 166

    (76) expre -> ID PUNTO ejecutar PARIZQ ID . COMA ID PARDER

    COMA            shift and go to state 169


state 167

    (9) instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .

    def             reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    if              reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    from            reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    import          reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    global          reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    ID              reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    main            reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    print           reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    for             reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    return          reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    ARROBA          reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    ejecutar        reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    goto            reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    label           reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)
    $end            reduce using rule 9 (instruccion -> if PARIZQ expre relacional expre PARDER DOS_PUNTOS .)


state 168

    (37) ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .

    def             reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    if              reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    from            reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    import          reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    global          reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    ID              reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    main            reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    print           reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    for             reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    return          reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    ARROBA          reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    ejecutar        reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    goto            reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    label           reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    $end            reduce using rule 37 (ldeclaracionesg -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)


state 169

    (76) expre -> ID PUNTO ejecutar PARIZQ ID COMA . ID PARDER

    ID              shift and go to state 170


state 170

    (76) expre -> ID PUNTO ejecutar PARIZQ ID COMA ID . PARDER

    PARDER          shift and go to state 171


state 171

    (76) expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .

    CORDER          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    IGUAL           reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MAYORQ          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MENORQ          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MAYOR_IGUALQ    reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MENOR_IGUALQ    reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    DISTINTO        reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MAS             reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MENOS           reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    POR             reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    DIVIDIDO        reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    EXPONENCIACION  reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    MODULO          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    def             reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    if              reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    from            reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    import          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    global          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    ID              reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    main            reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    print           reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    for             reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    return          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    ARROBA          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    ejecutar        reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    goto            reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    label           reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    $end            reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)
    PARDER          reduce using rule 76 (expre -> ID PUNTO ejecutar PARIZQ ID COMA ID PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PARIZQ in state 5 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 6 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 6 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 119 resolved as shift
WARNING: reduce/reduce conflict in state 154 resolved using rule (ldeclaracionesg -> ID PUNTO ID IGUAL CORIZQ CORDER)
WARNING: rejected rule (expre -> CORIZQ CORDER) in state 154
